// Generated by gencpp from file av_msgs/TrafficLight.msg
// DO NOT EDIT!


#ifndef AV_MSGS_MESSAGE_TRAFFICLIGHT_H
#define AV_MSGS_MESSAGE_TRAFFICLIGHT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace av_msgs
{
template <class ContainerAllocator>
struct TrafficLight_
{
  typedef TrafficLight_<ContainerAllocator> Type;

  TrafficLight_()
    : id(0)
    , type(0)
    , status(0)
    , time(0)
    , confidence(0.0)  {
    }
  TrafficLight_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , status(0)
    , time(0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _time_type;
  _time_type time;

   typedef float _confidence_type;
  _confidence_type confidence;




  typedef boost::shared_ptr< ::av_msgs::TrafficLight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_msgs::TrafficLight_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLight_

typedef ::av_msgs::TrafficLight_<std::allocator<void> > TrafficLight;

typedef boost::shared_ptr< ::av_msgs::TrafficLight > TrafficLightPtr;
typedef boost::shared_ptr< ::av_msgs::TrafficLight const> TrafficLightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_msgs::TrafficLight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_msgs::TrafficLight_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace av_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'av_msgs': ['/home/zhouji/Documents/autodrive/cakin_ws/src/mustang/common/av_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::TrafficLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::TrafficLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::TrafficLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::TrafficLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::TrafficLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::TrafficLight_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_msgs::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12e6ff6aa826247c71e4c2bc2f9e6414";
  }

  static const char* value(const ::av_msgs::TrafficLight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12e6ff6aa826247cULL;
  static const uint64_t static_value2 = 0x71e4c2bc2f9e6414ULL;
};

template<class ContainerAllocator>
struct DataType< ::av_msgs::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_msgs/TrafficLight";
  }

  static const char* value(const ::av_msgs::TrafficLight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_msgs::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n\
#交通灯ID\n\
uint8 type\n\
#圆形1 左转2 直行3 右转4 左转掉头5 掉头6\n\
uint8 status\n\
#红1 绿2 黄3\n\
uint8 time\n\
#当前状态倒数数字\n\
float32 confidence\n\
#置信度\n\
";
  }

  static const char* value(const ::av_msgs::TrafficLight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_msgs::TrafficLight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.status);
      stream.next(m.time);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_msgs::TrafficLight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_msgs::TrafficLight_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MSGS_MESSAGE_TRAFFICLIGHT_H
