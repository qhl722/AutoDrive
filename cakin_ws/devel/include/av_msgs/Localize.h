// Generated by gencpp from file av_msgs/Localize.msg
// DO NOT EDIT!


#ifndef AV_MSGS_MESSAGE_LOCALIZE_H
#define AV_MSGS_MESSAGE_LOCALIZE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace av_msgs
{
template <class ContainerAllocator>
struct Localize_
{
  typedef Localize_<ContainerAllocator> Type;

  Localize_()
    : timestamp(0)
    , raw_data()
    , mTime(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , vel_x(0.0)
    , vel_y(0.0)
    , vel_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , nav_mode(0)
    , pos_mode(0)
    , vel_mode(0)
    , att_mode(0)
    , angular_vel_x(0.0)
    , angular_vel_y(0.0)
    , angular_vel_z(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , pose_x(0.0)
    , pose_y(0.0)  {
    }
  Localize_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , raw_data(_alloc)
    , mTime(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , vel_x(0.0)
    , vel_y(0.0)
    , vel_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , nav_mode(0)
    , pos_mode(0)
    , vel_mode(0)
    , att_mode(0)
    , angular_vel_x(0.0)
    , angular_vel_y(0.0)
    , angular_vel_z(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , pose_x(0.0)
    , pose_y(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _raw_data_type;
  _raw_data_type raw_data;

   typedef double _mTime_type;
  _mTime_type mTime;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _vel_x_type;
  _vel_x_type vel_x;

   typedef double _vel_y_type;
  _vel_y_type vel_y;

   typedef double _vel_z_type;
  _vel_z_type vel_z;

   typedef double _acc_x_type;
  _acc_x_type acc_x;

   typedef double _acc_y_type;
  _acc_y_type acc_y;

   typedef double _acc_z_type;
  _acc_z_type acc_z;

   typedef uint8_t _nav_mode_type;
  _nav_mode_type nav_mode;

   typedef uint8_t _pos_mode_type;
  _pos_mode_type pos_mode;

   typedef uint8_t _vel_mode_type;
  _vel_mode_type vel_mode;

   typedef uint8_t _att_mode_type;
  _att_mode_type att_mode;

   typedef double _angular_vel_x_type;
  _angular_vel_x_type angular_vel_x;

   typedef double _angular_vel_y_type;
  _angular_vel_y_type angular_vel_y;

   typedef double _angular_vel_z_type;
  _angular_vel_z_type angular_vel_z;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pose_x_type;
  _pose_x_type pose_x;

   typedef double _pose_y_type;
  _pose_y_type pose_y;




  typedef boost::shared_ptr< ::av_msgs::Localize_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_msgs::Localize_<ContainerAllocator> const> ConstPtr;

}; // struct Localize_

typedef ::av_msgs::Localize_<std::allocator<void> > Localize;

typedef boost::shared_ptr< ::av_msgs::Localize > LocalizePtr;
typedef boost::shared_ptr< ::av_msgs::Localize const> LocalizeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_msgs::Localize_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_msgs::Localize_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace av_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'av_msgs': ['/home/zhouji/Documents/autodrive/cakin_ws/src/mustang/common/av_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::Localize_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::Localize_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::Localize_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::Localize_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::Localize_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::Localize_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_msgs::Localize_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2f7aa9b1e8b30874a6fa2a9ed3ff135";
  }

  static const char* value(const ::av_msgs::Localize_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2f7aa9b1e8b3087ULL;
  static const uint64_t static_value2 = 0x4a6fa2a9ed3ff135ULL;
};

template<class ContainerAllocator>
struct DataType< ::av_msgs::Localize_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_msgs/Localize";
  }

  static const char* value(const ::av_msgs::Localize_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_msgs::Localize_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp\n\
string raw_data\n\
float64 mTime\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
float64 vel_x\n\
float64 vel_y\n\
float64 vel_z\n\
float64 acc_x\n\
float64 acc_y\n\
float64 acc_z\n\
uint8 nav_mode\n\
uint8 pos_mode\n\
uint8 vel_mode\n\
uint8 att_mode\n\
float64 angular_vel_x\n\
float64 angular_vel_y\n\
float64 angular_vel_z\n\
float64 heading\n\
float64 pitch\n\
float64 roll\n\
float64 pose_x\n\
float64 pose_y\n\
";
  }

  static const char* value(const ::av_msgs::Localize_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_msgs::Localize_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.raw_data);
      stream.next(m.mTime);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.vel_x);
      stream.next(m.vel_y);
      stream.next(m.vel_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.nav_mode);
      stream.next(m.pos_mode);
      stream.next(m.vel_mode);
      stream.next(m.att_mode);
      stream.next(m.angular_vel_x);
      stream.next(m.angular_vel_y);
      stream.next(m.angular_vel_z);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.pose_x);
      stream.next(m.pose_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Localize_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_msgs::Localize_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_msgs::Localize_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "raw_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.raw_data);
    s << indent << "mTime: ";
    Printer<double>::stream(s, indent + "  ", v.mTime);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.vel_y);
    s << indent << "vel_z: ";
    Printer<double>::stream(s, indent + "  ", v.vel_z);
    s << indent << "acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.acc_z);
    s << indent << "nav_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nav_mode);
    s << indent << "pos_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos_mode);
    s << indent << "vel_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vel_mode);
    s << indent << "att_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.att_mode);
    s << indent << "angular_vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.angular_vel_x);
    s << indent << "angular_vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.angular_vel_y);
    s << indent << "angular_vel_z: ";
    Printer<double>::stream(s, indent + "  ", v.angular_vel_z);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pose_x: ";
    Printer<double>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<double>::stream(s, indent + "  ", v.pose_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MSGS_MESSAGE_LOCALIZE_H
