// Generated by gencpp from file av_msgs/VehicleMsg.msg
// DO NOT EDIT!


#ifndef AV_MSGS_MESSAGE_VEHICLEMSG_H
#define AV_MSGS_MESSAGE_VEHICLEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace av_msgs
{
template <class ContainerAllocator>
struct VehicleMsg_
{
  typedef VehicleMsg_<ContainerAllocator> Type;

  VehicleMsg_()
    : id(0)
    , VehicleSpeedValid(0.0)
    , Wheelspeed_RL(0.0)
    , Wheelspeed_RR(0.0)
    , Wheelspeed_RL_Valid(0.0)
    , Wheelspeed_RR_Valid(0.0)
    , VehicleSpeed(0.0)
    , VehicleSpeed_stp(0.0)
    , YawRate(0.0)
    , LatAcceleration(0.0)
    , LongAcceleration(0.0)
    , EngineSpeed(0.0)
    , EngineIdleSpeed(0.0)
    , STAT_AcceleratorpedalPosition(0.0)
    , STAT_AcceleratorPosRaw(0.0)
    , Torsion_Bar_Torque(0.0)
    , SteeringAngle(0.0)
    , Steering_Angle_Speed(0.0)  {
    }
  VehicleMsg_(const ContainerAllocator& _alloc)
    : id(0)
    , VehicleSpeedValid(0.0)
    , Wheelspeed_RL(0.0)
    , Wheelspeed_RR(0.0)
    , Wheelspeed_RL_Valid(0.0)
    , Wheelspeed_RR_Valid(0.0)
    , VehicleSpeed(0.0)
    , VehicleSpeed_stp(0.0)
    , YawRate(0.0)
    , LatAcceleration(0.0)
    , LongAcceleration(0.0)
    , EngineSpeed(0.0)
    , EngineIdleSpeed(0.0)
    , STAT_AcceleratorpedalPosition(0.0)
    , STAT_AcceleratorPosRaw(0.0)
    , Torsion_Bar_Torque(0.0)
    , SteeringAngle(0.0)
    , Steering_Angle_Speed(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef float _VehicleSpeedValid_type;
  _VehicleSpeedValid_type VehicleSpeedValid;

   typedef float _Wheelspeed_RL_type;
  _Wheelspeed_RL_type Wheelspeed_RL;

   typedef float _Wheelspeed_RR_type;
  _Wheelspeed_RR_type Wheelspeed_RR;

   typedef float _Wheelspeed_RL_Valid_type;
  _Wheelspeed_RL_Valid_type Wheelspeed_RL_Valid;

   typedef float _Wheelspeed_RR_Valid_type;
  _Wheelspeed_RR_Valid_type Wheelspeed_RR_Valid;

   typedef float _VehicleSpeed_type;
  _VehicleSpeed_type VehicleSpeed;

   typedef float _VehicleSpeed_stp_type;
  _VehicleSpeed_stp_type VehicleSpeed_stp;

   typedef float _YawRate_type;
  _YawRate_type YawRate;

   typedef float _LatAcceleration_type;
  _LatAcceleration_type LatAcceleration;

   typedef float _LongAcceleration_type;
  _LongAcceleration_type LongAcceleration;

   typedef float _EngineSpeed_type;
  _EngineSpeed_type EngineSpeed;

   typedef float _EngineIdleSpeed_type;
  _EngineIdleSpeed_type EngineIdleSpeed;

   typedef float _STAT_AcceleratorpedalPosition_type;
  _STAT_AcceleratorpedalPosition_type STAT_AcceleratorpedalPosition;

   typedef float _STAT_AcceleratorPosRaw_type;
  _STAT_AcceleratorPosRaw_type STAT_AcceleratorPosRaw;

   typedef float _Torsion_Bar_Torque_type;
  _Torsion_Bar_Torque_type Torsion_Bar_Torque;

   typedef float _SteeringAngle_type;
  _SteeringAngle_type SteeringAngle;

   typedef float _Steering_Angle_Speed_type;
  _Steering_Angle_Speed_type Steering_Angle_Speed;




  typedef boost::shared_ptr< ::av_msgs::VehicleMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_msgs::VehicleMsg_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleMsg_

typedef ::av_msgs::VehicleMsg_<std::allocator<void> > VehicleMsg;

typedef boost::shared_ptr< ::av_msgs::VehicleMsg > VehicleMsgPtr;
typedef boost::shared_ptr< ::av_msgs::VehicleMsg const> VehicleMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_msgs::VehicleMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_msgs::VehicleMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace av_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'av_msgs': ['/home/zhouji/Documents/autodrive/cakin_ws/src/mustang/common/av_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::VehicleMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::VehicleMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::VehicleMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::VehicleMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::VehicleMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::VehicleMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_msgs::VehicleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9809de6ec8139008921380dd7bb5146d";
  }

  static const char* value(const ::av_msgs::VehicleMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9809de6ec8139008ULL;
  static const uint64_t static_value2 = 0x921380dd7bb5146dULL;
};

template<class ContainerAllocator>
struct DataType< ::av_msgs::VehicleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_msgs/VehicleMsg";
  }

  static const char* value(const ::av_msgs::VehicleMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_msgs::VehicleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64     id\n\
float32    VehicleSpeedValid\n\
float32    Wheelspeed_RL\n\
float32    Wheelspeed_RR\n\
float32    Wheelspeed_RL_Valid\n\
float32    Wheelspeed_RR_Valid\n\
float32    VehicleSpeed\n\
float32    VehicleSpeed_stp\n\
float32    YawRate\n\
float32    LatAcceleration\n\
float32    LongAcceleration\n\
float32    EngineSpeed\n\
float32    EngineIdleSpeed\n\
float32    STAT_AcceleratorpedalPosition\n\
float32    STAT_AcceleratorPosRaw\n\
float32    Torsion_Bar_Torque\n\
float32    SteeringAngle\n\
float32    Steering_Angle_Speed\n\
";
  }

  static const char* value(const ::av_msgs::VehicleMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_msgs::VehicleMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.VehicleSpeedValid);
      stream.next(m.Wheelspeed_RL);
      stream.next(m.Wheelspeed_RR);
      stream.next(m.Wheelspeed_RL_Valid);
      stream.next(m.Wheelspeed_RR_Valid);
      stream.next(m.VehicleSpeed);
      stream.next(m.VehicleSpeed_stp);
      stream.next(m.YawRate);
      stream.next(m.LatAcceleration);
      stream.next(m.LongAcceleration);
      stream.next(m.EngineSpeed);
      stream.next(m.EngineIdleSpeed);
      stream.next(m.STAT_AcceleratorpedalPosition);
      stream.next(m.STAT_AcceleratorPosRaw);
      stream.next(m.Torsion_Bar_Torque);
      stream.next(m.SteeringAngle);
      stream.next(m.Steering_Angle_Speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_msgs::VehicleMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_msgs::VehicleMsg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "VehicleSpeedValid: ";
    Printer<float>::stream(s, indent + "  ", v.VehicleSpeedValid);
    s << indent << "Wheelspeed_RL: ";
    Printer<float>::stream(s, indent + "  ", v.Wheelspeed_RL);
    s << indent << "Wheelspeed_RR: ";
    Printer<float>::stream(s, indent + "  ", v.Wheelspeed_RR);
    s << indent << "Wheelspeed_RL_Valid: ";
    Printer<float>::stream(s, indent + "  ", v.Wheelspeed_RL_Valid);
    s << indent << "Wheelspeed_RR_Valid: ";
    Printer<float>::stream(s, indent + "  ", v.Wheelspeed_RR_Valid);
    s << indent << "VehicleSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.VehicleSpeed);
    s << indent << "VehicleSpeed_stp: ";
    Printer<float>::stream(s, indent + "  ", v.VehicleSpeed_stp);
    s << indent << "YawRate: ";
    Printer<float>::stream(s, indent + "  ", v.YawRate);
    s << indent << "LatAcceleration: ";
    Printer<float>::stream(s, indent + "  ", v.LatAcceleration);
    s << indent << "LongAcceleration: ";
    Printer<float>::stream(s, indent + "  ", v.LongAcceleration);
    s << indent << "EngineSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.EngineSpeed);
    s << indent << "EngineIdleSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.EngineIdleSpeed);
    s << indent << "STAT_AcceleratorpedalPosition: ";
    Printer<float>::stream(s, indent + "  ", v.STAT_AcceleratorpedalPosition);
    s << indent << "STAT_AcceleratorPosRaw: ";
    Printer<float>::stream(s, indent + "  ", v.STAT_AcceleratorPosRaw);
    s << indent << "Torsion_Bar_Torque: ";
    Printer<float>::stream(s, indent + "  ", v.Torsion_Bar_Torque);
    s << indent << "SteeringAngle: ";
    Printer<float>::stream(s, indent + "  ", v.SteeringAngle);
    s << indent << "Steering_Angle_Speed: ";
    Printer<float>::stream(s, indent + "  ", v.Steering_Angle_Speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MSGS_MESSAGE_VEHICLEMSG_H
