// Generated by gencpp from file av_msgs/VehicleState.msg
// DO NOT EDIT!


#ifndef AV_MSGS_MESSAGE_VEHICLESTATE_H
#define AV_MSGS_MESSAGE_VEHICLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace av_msgs
{
template <class ContainerAllocator>
struct VehicleState_
{
  typedef VehicleState_<ContainerAllocator> Type;

  VehicleState_()
    : timestamp(0)
    , x(0.0)
    , y(0.0)
    , ang(0.0)
    , vel_x(0.0)
    , vel_y(0.0)
    , vel_ang(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_ang(0.0)
    , ref_curvature(0.0)  {
    }
  VehicleState_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , x(0.0)
    , y(0.0)
    , ang(0.0)
    , vel_x(0.0)
    , vel_y(0.0)
    , vel_ang(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_ang(0.0)
    , ref_curvature(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _ang_type;
  _ang_type ang;

   typedef double _vel_x_type;
  _vel_x_type vel_x;

   typedef double _vel_y_type;
  _vel_y_type vel_y;

   typedef double _vel_ang_type;
  _vel_ang_type vel_ang;

   typedef double _acc_x_type;
  _acc_x_type acc_x;

   typedef double _acc_y_type;
  _acc_y_type acc_y;

   typedef double _acc_ang_type;
  _acc_ang_type acc_ang;

   typedef double _ref_curvature_type;
  _ref_curvature_type ref_curvature;




  typedef boost::shared_ptr< ::av_msgs::VehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_msgs::VehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleState_

typedef ::av_msgs::VehicleState_<std::allocator<void> > VehicleState;

typedef boost::shared_ptr< ::av_msgs::VehicleState > VehicleStatePtr;
typedef boost::shared_ptr< ::av_msgs::VehicleState const> VehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_msgs::VehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_msgs::VehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace av_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'av_msgs': ['/home/zhouji/Documents/autodrive/cakin_ws/src/mustang/common/av_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::VehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::VehicleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf167c65e8246be405f6d862a2d02a6d";
  }

  static const char* value(const ::av_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf167c65e8246be4ULL;
  static const uint64_t static_value2 = 0x05f6d862a2d02a6dULL;
};

template<class ContainerAllocator>
struct DataType< ::av_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_msgs/VehicleState";
  }

  static const char* value(const ::av_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp\n\
float64 x\n\
float64 y\n\
float64 ang\n\
float64 vel_x\n\
float64 vel_y\n\
float64 vel_ang\n\
float64 acc_x\n\
float64 acc_y\n\
float64 acc_ang\n\
float64 ref_curvature\n\
";
  }

  static const char* value(const ::av_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_msgs::VehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.ang);
      stream.next(m.vel_x);
      stream.next(m.vel_y);
      stream.next(m.vel_ang);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_ang);
      stream.next(m.ref_curvature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_msgs::VehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_msgs::VehicleState_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "ang: ";
    Printer<double>::stream(s, indent + "  ", v.ang);
    s << indent << "vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.vel_y);
    s << indent << "vel_ang: ";
    Printer<double>::stream(s, indent + "  ", v.vel_ang);
    s << indent << "acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_ang: ";
    Printer<double>::stream(s, indent + "  ", v.acc_ang);
    s << indent << "ref_curvature: ";
    Printer<double>::stream(s, indent + "  ", v.ref_curvature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MSGS_MESSAGE_VEHICLESTATE_H
