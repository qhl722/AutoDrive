# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/getLocalLanemarkersRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class getLocalLanemarkersRequest(genpy.Message):
  _md5sum = "ff8d7d66dd3e4b731ef14a45d38888b6"
  _type = "av_msgs/getLocalLanemarkersRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 x
float32 y
"""
  __slots__ = ['x','y']
  _slot_types = ['float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getLocalLanemarkersRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
    else:
      self.x = 0.
      self.y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.x, _x.y,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.x, _x.y,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/getLocalLanemarkersResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import av_msgs.msg

class getLocalLanemarkersResponse(genpy.Message):
  _md5sum = "09ef0c25041b94a1f55f700096cfd4a0"
  _type = "av_msgs/getLocalLanemarkersResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """SectionList[] section_list


================================================================================
MSG: av_msgs/SectionList
# SectionList
LaneMarker[] lane_marker_list
# 0:curved 1:straight
int8 section_type


================================================================================
MSG: av_msgs/LaneMarker
#车道线类型
int8 paint_type
#车道线点序列
WayPoint[] waypoints


================================================================================
MSG: av_msgs/WayPoint
float64 x
float64 y"""
  __slots__ = ['section_list']
  _slot_types = ['av_msgs/SectionList[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       section_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getLocalLanemarkersResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.section_list is None:
        self.section_list = []
    else:
      self.section_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.section_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.section_list:
        length = len(val1.lane_marker_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lane_marker_list:
          buff.write(_struct_b.pack(val2.paint_type))
          length = len(val2.waypoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.waypoints:
            _x = val3
            buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_b.pack(val1.section_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.section_list is None:
        self.section_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.section_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.SectionList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lane_marker_list = []
        for i in range(0, length):
          val2 = av_msgs.msg.LaneMarker()
          start = end
          end += 1
          (val2.paint_type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.waypoints = []
          for i in range(0, length):
            val3 = av_msgs.msg.WayPoint()
            _x = val3
            start = end
            end += 16
            (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
            val2.waypoints.append(val3)
          val1.lane_marker_list.append(val2)
        start = end
        end += 1
        (val1.section_type,) = _struct_b.unpack(str[start:end])
        self.section_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.section_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.section_list:
        length = len(val1.lane_marker_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lane_marker_list:
          buff.write(_struct_b.pack(val2.paint_type))
          length = len(val2.waypoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.waypoints:
            _x = val3
            buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_b.pack(val1.section_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.section_list is None:
        self.section_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.section_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.SectionList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lane_marker_list = []
        for i in range(0, length):
          val2 = av_msgs.msg.LaneMarker()
          start = end
          end += 1
          (val2.paint_type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.waypoints = []
          for i in range(0, length):
            val3 = av_msgs.msg.WayPoint()
            _x = val3
            start = end
            end += 16
            (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
            val2.waypoints.append(val3)
          val1.lane_marker_list.append(val2)
        start = end
        end += 1
        (val1.section_type,) = _struct_b.unpack(str[start:end])
        self.section_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_b = struct.Struct("<b")
class getLocalLanemarkers(object):
  _type          = 'av_msgs/getLocalLanemarkers'
  _md5sum = 'a154757fc95dc3366fcef9af186dff3e'
  _request_class  = getLocalLanemarkersRequest
  _response_class = getLocalLanemarkersResponse
