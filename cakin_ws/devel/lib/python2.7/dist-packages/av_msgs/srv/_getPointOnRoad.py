# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/getPointOnRoadRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import av_msgs.msg

class getPointOnRoadRequest(genpy.Message):
  _md5sum = "62ee6e4453b33e5728e75e9e06a9c4f4"
  _type = "av_msgs/getPointOnRoadRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 origin_x
float64 origin_y
float64 r
WayPoint[] pose_point

================================================================================
MSG: av_msgs/WayPoint
float64 x
float64 y"""
  __slots__ = ['origin_x','origin_y','r','pose_point']
  _slot_types = ['float64','float64','float64','av_msgs/WayPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       origin_x,origin_y,r,pose_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getPointOnRoadRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.origin_x is None:
        self.origin_x = 0.
      if self.origin_y is None:
        self.origin_y = 0.
      if self.r is None:
        self.r = 0.
      if self.pose_point is None:
        self.pose_point = []
    else:
      self.origin_x = 0.
      self.origin_y = 0.
      self.r = 0.
      self.pose_point = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.origin_x, _x.origin_y, _x.r))
      length = len(self.pose_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose_point:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose_point is None:
        self.pose_point = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.origin_x, _x.origin_y, _x.r,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose_point = []
      for i in range(0, length):
        val1 = av_msgs.msg.WayPoint()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.pose_point.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.origin_x, _x.origin_y, _x.r))
      length = len(self.pose_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose_point:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose_point is None:
        self.pose_point = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.origin_x, _x.origin_y, _x.r,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose_point = []
      for i in range(0, length):
        val1 = av_msgs.msg.WayPoint()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.pose_point.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_3d = struct.Struct("<3d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/getPointOnRoadResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class getPointOnRoadResponse(genpy.Message):
  _md5sum = "cfa26713f7564a36d6c15c911217d3b9"
  _type = "av_msgs/getPointOnRoadResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool[] result

"""
  __slots__ = ['result']
  _slot_types = ['bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getPointOnRoadResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = []
    else:
      self.result = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.result)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.result = struct.unpack(pattern, str[start:end])
      self.result = map(bool, self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.result)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.result.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.result = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.result = map(bool, self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class getPointOnRoad(object):
  _type          = 'av_msgs/getPointOnRoad'
  _md5sum = '738f40f3eff47b68be9fc103c5b62eb4'
  _request_class  = getPointOnRoadRequest
  _response_class = getPointOnRoadResponse
