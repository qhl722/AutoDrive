# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/FusionMap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import av_msgs.msg

class FusionMap(genpy.Message):
  _md5sum = "aa32fc0bd4214ed3b5eceff3c45ac56b"
  _type = "av_msgs/FusionMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Fusion map.

uint64 timestamp                        # 当前时间戳

DynamicObstacle[] dynamic_object_list   # 动态障碍物列表

GridMap obstacle_map                    # 静态障碍物矩阵，150*100m(前100，后50，左50，右50)，
                                        # 粒度10cm*10cm, 可行驶区域为0，障碍物为1，不可见区域－1
SectionList[] section_list           	# 车道线列表

Pose pose

================================================================================
MSG: av_msgs/DynamicObstacle
uint8 class_id
uint64 id
float32 center_x
float32 center_y
float32 center_z
float32 width
float32 height
float32 length
float32 velocity
# 车头夹角
float32 heading
# 角速度
float32 omega
# 加速度
float32 acceleration
# 遮挡时间，单位 sec
uint32 shield_time

# 测速 box 模型的协方差（用一维数组模拟二维数组，需要转换，6 * 6）
float64[] velocity_measurement_covariance


================================================================================
MSG: av_msgs/GridMap
int32 width
int32 length
int32 center_x
int32 center_y
uint8[] grid_map

================================================================================
MSG: av_msgs/SectionList
# SectionList
LaneMarker[] lane_marker_list
# 0:curved 1:straight
int8 section_type


================================================================================
MSG: av_msgs/LaneMarker
#车道线类型
int8 paint_type
#车道线点序列
WayPoint[] waypoints


================================================================================
MSG: av_msgs/WayPoint
float64 x
float64 y
================================================================================
MSG: av_msgs/Pose
# 时间戳
uint64 timestamp
# 轨迹x坐标
float64 x
# 轨迹y坐标
float64 y
# 轨迹朝向角坐标
float64 theta
# 曲率
float64 curvature
# 速度
float64 velocity
# 加速度
float64 acceleration
"""
  __slots__ = ['timestamp','dynamic_object_list','obstacle_map','section_list','pose']
  _slot_types = ['uint64','av_msgs/DynamicObstacle[]','av_msgs/GridMap','av_msgs/SectionList[]','av_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,dynamic_object_list,obstacle_map,section_list,pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusionMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.dynamic_object_list is None:
        self.dynamic_object_list = []
      if self.obstacle_map is None:
        self.obstacle_map = av_msgs.msg.GridMap()
      if self.section_list is None:
        self.section_list = []
      if self.pose is None:
        self.pose = av_msgs.msg.Pose()
    else:
      self.timestamp = 0
      self.dynamic_object_list = []
      self.obstacle_map = av_msgs.msg.GridMap()
      self.section_list = []
      self.pose = av_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_Q.pack(self.timestamp))
      length = len(self.dynamic_object_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.dynamic_object_list:
        _x = val1
        buff.write(_struct_BQ10fI.pack(_x.class_id, _x.id, _x.center_x, _x.center_y, _x.center_z, _x.width, _x.height, _x.length, _x.velocity, _x.heading, _x.omega, _x.acceleration, _x.shield_time))
        length = len(val1.velocity_measurement_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocity_measurement_covariance))
      _x = self
      buff.write(_struct_4i.pack(_x.obstacle_map.width, _x.obstacle_map.length, _x.obstacle_map.center_x, _x.obstacle_map.center_y))
      _x = self.obstacle_map.grid_map
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.section_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.section_list:
        length = len(val1.lane_marker_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lane_marker_list:
          buff.write(_struct_b.pack(val2.paint_type))
          length = len(val2.waypoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.waypoints:
            _x = val3
            buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_b.pack(val1.section_type))
      _x = self
      buff.write(_struct_Q6d.pack(_x.pose.timestamp, _x.pose.x, _x.pose.y, _x.pose.theta, _x.pose.curvature, _x.pose.velocity, _x.pose.acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.dynamic_object_list is None:
        self.dynamic_object_list = None
      if self.obstacle_map is None:
        self.obstacle_map = av_msgs.msg.GridMap()
      if self.section_list is None:
        self.section_list = None
      if self.pose is None:
        self.pose = av_msgs.msg.Pose()
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dynamic_object_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.DynamicObstacle()
        _x = val1
        start = end
        end += 53
        (_x.class_id, _x.id, _x.center_x, _x.center_y, _x.center_z, _x.width, _x.height, _x.length, _x.velocity, _x.heading, _x.omega, _x.acceleration, _x.shield_time,) = _struct_BQ10fI.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocity_measurement_covariance = struct.unpack(pattern, str[start:end])
        self.dynamic_object_list.append(val1)
      _x = self
      start = end
      end += 16
      (_x.obstacle_map.width, _x.obstacle_map.length, _x.obstacle_map.center_x, _x.obstacle_map.center_y,) = _struct_4i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.obstacle_map.grid_map = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.section_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.SectionList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lane_marker_list = []
        for i in range(0, length):
          val2 = av_msgs.msg.LaneMarker()
          start = end
          end += 1
          (val2.paint_type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.waypoints = []
          for i in range(0, length):
            val3 = av_msgs.msg.WayPoint()
            _x = val3
            start = end
            end += 16
            (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
            val2.waypoints.append(val3)
          val1.lane_marker_list.append(val2)
        start = end
        end += 1
        (val1.section_type,) = _struct_b.unpack(str[start:end])
        self.section_list.append(val1)
      _x = self
      start = end
      end += 56
      (_x.pose.timestamp, _x.pose.x, _x.pose.y, _x.pose.theta, _x.pose.curvature, _x.pose.velocity, _x.pose.acceleration,) = _struct_Q6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_Q.pack(self.timestamp))
      length = len(self.dynamic_object_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.dynamic_object_list:
        _x = val1
        buff.write(_struct_BQ10fI.pack(_x.class_id, _x.id, _x.center_x, _x.center_y, _x.center_z, _x.width, _x.height, _x.length, _x.velocity, _x.heading, _x.omega, _x.acceleration, _x.shield_time))
        length = len(val1.velocity_measurement_covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocity_measurement_covariance.tostring())
      _x = self
      buff.write(_struct_4i.pack(_x.obstacle_map.width, _x.obstacle_map.length, _x.obstacle_map.center_x, _x.obstacle_map.center_y))
      _x = self.obstacle_map.grid_map
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.section_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.section_list:
        length = len(val1.lane_marker_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lane_marker_list:
          buff.write(_struct_b.pack(val2.paint_type))
          length = len(val2.waypoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.waypoints:
            _x = val3
            buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_b.pack(val1.section_type))
      _x = self
      buff.write(_struct_Q6d.pack(_x.pose.timestamp, _x.pose.x, _x.pose.y, _x.pose.theta, _x.pose.curvature, _x.pose.velocity, _x.pose.acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.dynamic_object_list is None:
        self.dynamic_object_list = None
      if self.obstacle_map is None:
        self.obstacle_map = av_msgs.msg.GridMap()
      if self.section_list is None:
        self.section_list = None
      if self.pose is None:
        self.pose = av_msgs.msg.Pose()
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dynamic_object_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.DynamicObstacle()
        _x = val1
        start = end
        end += 53
        (_x.class_id, _x.id, _x.center_x, _x.center_y, _x.center_z, _x.width, _x.height, _x.length, _x.velocity, _x.heading, _x.omega, _x.acceleration, _x.shield_time,) = _struct_BQ10fI.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocity_measurement_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.dynamic_object_list.append(val1)
      _x = self
      start = end
      end += 16
      (_x.obstacle_map.width, _x.obstacle_map.length, _x.obstacle_map.center_x, _x.obstacle_map.center_y,) = _struct_4i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.obstacle_map.grid_map = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.section_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.SectionList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lane_marker_list = []
        for i in range(0, length):
          val2 = av_msgs.msg.LaneMarker()
          start = end
          end += 1
          (val2.paint_type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.waypoints = []
          for i in range(0, length):
            val3 = av_msgs.msg.WayPoint()
            _x = val3
            start = end
            end += 16
            (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
            val2.waypoints.append(val3)
          val1.lane_marker_list.append(val2)
        start = end
        end += 1
        (val1.section_type,) = _struct_b.unpack(str[start:end])
        self.section_list.append(val1)
      _x = self
      start = end
      end += 56
      (_x.pose.timestamp, _x.pose.x, _x.pose.y, _x.pose.theta, _x.pose.curvature, _x.pose.velocity, _x.pose.acceleration,) = _struct_Q6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_b = struct.Struct("<b")
_struct_Q6d = struct.Struct("<Q6d")
_struct_BQ10fI = struct.Struct("<BQ10fI")
_struct_Q = struct.Struct("<Q")
_struct_4i = struct.Struct("<4i")
