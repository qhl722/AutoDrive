# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/CameraVelodyneObjectList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import av_msgs.msg

class CameraVelodyneObjectList(genpy.Message):
  _md5sum = "00e3352e253ca731c1d5f90db8fe49fc"
  _type = "av_msgs/CameraVelodyneObjectList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
Object3D[] camera_velodyne_object_list
int32 width
int32 length
int32 center_x
int32 center_y
uint8[] grid_map

================================================================================
MSG: av_msgs/Object3D
uint8 class_id
float32 center_x
float32 center_y
float32 center_z
float32 length
float32 width
float32 height
float32 orient
float32 confidence
"""
  __slots__ = ['timestamp','camera_velodyne_object_list','width','length','center_x','center_y','grid_map']
  _slot_types = ['uint64','av_msgs/Object3D[]','int32','int32','int32','int32','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,camera_velodyne_object_list,width,length,center_x,center_y,grid_map

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraVelodyneObjectList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.camera_velodyne_object_list is None:
        self.camera_velodyne_object_list = []
      if self.width is None:
        self.width = 0
      if self.length is None:
        self.length = 0
      if self.center_x is None:
        self.center_x = 0
      if self.center_y is None:
        self.center_y = 0
      if self.grid_map is None:
        self.grid_map = ''
    else:
      self.timestamp = 0
      self.camera_velodyne_object_list = []
      self.width = 0
      self.length = 0
      self.center_x = 0
      self.center_y = 0
      self.grid_map = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_Q.pack(self.timestamp))
      length = len(self.camera_velodyne_object_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_velodyne_object_list:
        _x = val1
        buff.write(_struct_B8f.pack(_x.class_id, _x.center_x, _x.center_y, _x.center_z, _x.length, _x.width, _x.height, _x.orient, _x.confidence))
      _x = self
      buff.write(_struct_4i.pack(_x.width, _x.length, _x.center_x, _x.center_y))
      _x = self.grid_map
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.camera_velodyne_object_list is None:
        self.camera_velodyne_object_list = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_velodyne_object_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.Object3D()
        _x = val1
        start = end
        end += 33
        (_x.class_id, _x.center_x, _x.center_y, _x.center_z, _x.length, _x.width, _x.height, _x.orient, _x.confidence,) = _struct_B8f.unpack(str[start:end])
        self.camera_velodyne_object_list.append(val1)
      _x = self
      start = end
      end += 16
      (_x.width, _x.length, _x.center_x, _x.center_y,) = _struct_4i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_map = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_Q.pack(self.timestamp))
      length = len(self.camera_velodyne_object_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_velodyne_object_list:
        _x = val1
        buff.write(_struct_B8f.pack(_x.class_id, _x.center_x, _x.center_y, _x.center_z, _x.length, _x.width, _x.height, _x.orient, _x.confidence))
      _x = self
      buff.write(_struct_4i.pack(_x.width, _x.length, _x.center_x, _x.center_y))
      _x = self.grid_map
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.camera_velodyne_object_list is None:
        self.camera_velodyne_object_list = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_velodyne_object_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.Object3D()
        _x = val1
        start = end
        end += 33
        (_x.class_id, _x.center_x, _x.center_y, _x.center_z, _x.length, _x.width, _x.height, _x.orient, _x.confidence,) = _struct_B8f.unpack(str[start:end])
        self.camera_velodyne_object_list.append(val1)
      _x = self
      start = end
      end += 16
      (_x.width, _x.length, _x.center_x, _x.center_y,) = _struct_4i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_map = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q = struct.Struct("<Q")
_struct_4i = struct.Struct("<4i")
_struct_B8f = struct.Struct("<B8f")
