# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/VehicleMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VehicleMsg(genpy.Message):
  _md5sum = "9809de6ec8139008921380dd7bb5146d"
  _type = "av_msgs/VehicleMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64     id
float32    VehicleSpeedValid
float32    Wheelspeed_RL
float32    Wheelspeed_RR
float32    Wheelspeed_RL_Valid
float32    Wheelspeed_RR_Valid
float32    VehicleSpeed
float32    VehicleSpeed_stp
float32    YawRate
float32    LatAcceleration
float32    LongAcceleration
float32    EngineSpeed
float32    EngineIdleSpeed
float32    STAT_AcceleratorpedalPosition
float32    STAT_AcceleratorPosRaw
float32    Torsion_Bar_Torque
float32    SteeringAngle
float32    Steering_Angle_Speed
"""
  __slots__ = ['id','VehicleSpeedValid','Wheelspeed_RL','Wheelspeed_RR','Wheelspeed_RL_Valid','Wheelspeed_RR_Valid','VehicleSpeed','VehicleSpeed_stp','YawRate','LatAcceleration','LongAcceleration','EngineSpeed','EngineIdleSpeed','STAT_AcceleratorpedalPosition','STAT_AcceleratorPosRaw','Torsion_Bar_Torque','SteeringAngle','Steering_Angle_Speed']
  _slot_types = ['uint64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,VehicleSpeedValid,Wheelspeed_RL,Wheelspeed_RR,Wheelspeed_RL_Valid,Wheelspeed_RR_Valid,VehicleSpeed,VehicleSpeed_stp,YawRate,LatAcceleration,LongAcceleration,EngineSpeed,EngineIdleSpeed,STAT_AcceleratorpedalPosition,STAT_AcceleratorPosRaw,Torsion_Bar_Torque,SteeringAngle,Steering_Angle_Speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.VehicleSpeedValid is None:
        self.VehicleSpeedValid = 0.
      if self.Wheelspeed_RL is None:
        self.Wheelspeed_RL = 0.
      if self.Wheelspeed_RR is None:
        self.Wheelspeed_RR = 0.
      if self.Wheelspeed_RL_Valid is None:
        self.Wheelspeed_RL_Valid = 0.
      if self.Wheelspeed_RR_Valid is None:
        self.Wheelspeed_RR_Valid = 0.
      if self.VehicleSpeed is None:
        self.VehicleSpeed = 0.
      if self.VehicleSpeed_stp is None:
        self.VehicleSpeed_stp = 0.
      if self.YawRate is None:
        self.YawRate = 0.
      if self.LatAcceleration is None:
        self.LatAcceleration = 0.
      if self.LongAcceleration is None:
        self.LongAcceleration = 0.
      if self.EngineSpeed is None:
        self.EngineSpeed = 0.
      if self.EngineIdleSpeed is None:
        self.EngineIdleSpeed = 0.
      if self.STAT_AcceleratorpedalPosition is None:
        self.STAT_AcceleratorpedalPosition = 0.
      if self.STAT_AcceleratorPosRaw is None:
        self.STAT_AcceleratorPosRaw = 0.
      if self.Torsion_Bar_Torque is None:
        self.Torsion_Bar_Torque = 0.
      if self.SteeringAngle is None:
        self.SteeringAngle = 0.
      if self.Steering_Angle_Speed is None:
        self.Steering_Angle_Speed = 0.
    else:
      self.id = 0
      self.VehicleSpeedValid = 0.
      self.Wheelspeed_RL = 0.
      self.Wheelspeed_RR = 0.
      self.Wheelspeed_RL_Valid = 0.
      self.Wheelspeed_RR_Valid = 0.
      self.VehicleSpeed = 0.
      self.VehicleSpeed_stp = 0.
      self.YawRate = 0.
      self.LatAcceleration = 0.
      self.LongAcceleration = 0.
      self.EngineSpeed = 0.
      self.EngineIdleSpeed = 0.
      self.STAT_AcceleratorpedalPosition = 0.
      self.STAT_AcceleratorPosRaw = 0.
      self.Torsion_Bar_Torque = 0.
      self.SteeringAngle = 0.
      self.Steering_Angle_Speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Q17f.pack(_x.id, _x.VehicleSpeedValid, _x.Wheelspeed_RL, _x.Wheelspeed_RR, _x.Wheelspeed_RL_Valid, _x.Wheelspeed_RR_Valid, _x.VehicleSpeed, _x.VehicleSpeed_stp, _x.YawRate, _x.LatAcceleration, _x.LongAcceleration, _x.EngineSpeed, _x.EngineIdleSpeed, _x.STAT_AcceleratorpedalPosition, _x.STAT_AcceleratorPosRaw, _x.Torsion_Bar_Torque, _x.SteeringAngle, _x.Steering_Angle_Speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.id, _x.VehicleSpeedValid, _x.Wheelspeed_RL, _x.Wheelspeed_RR, _x.Wheelspeed_RL_Valid, _x.Wheelspeed_RR_Valid, _x.VehicleSpeed, _x.VehicleSpeed_stp, _x.YawRate, _x.LatAcceleration, _x.LongAcceleration, _x.EngineSpeed, _x.EngineIdleSpeed, _x.STAT_AcceleratorpedalPosition, _x.STAT_AcceleratorPosRaw, _x.Torsion_Bar_Torque, _x.SteeringAngle, _x.Steering_Angle_Speed,) = _struct_Q17f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Q17f.pack(_x.id, _x.VehicleSpeedValid, _x.Wheelspeed_RL, _x.Wheelspeed_RR, _x.Wheelspeed_RL_Valid, _x.Wheelspeed_RR_Valid, _x.VehicleSpeed, _x.VehicleSpeed_stp, _x.YawRate, _x.LatAcceleration, _x.LongAcceleration, _x.EngineSpeed, _x.EngineIdleSpeed, _x.STAT_AcceleratorpedalPosition, _x.STAT_AcceleratorPosRaw, _x.Torsion_Bar_Torque, _x.SteeringAngle, _x.Steering_Angle_Speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.id, _x.VehicleSpeedValid, _x.Wheelspeed_RL, _x.Wheelspeed_RR, _x.Wheelspeed_RL_Valid, _x.Wheelspeed_RR_Valid, _x.VehicleSpeed, _x.VehicleSpeed_stp, _x.YawRate, _x.LatAcceleration, _x.LongAcceleration, _x.EngineSpeed, _x.EngineIdleSpeed, _x.STAT_AcceleratorpedalPosition, _x.STAT_AcceleratorPosRaw, _x.Torsion_Bar_Torque, _x.SteeringAngle, _x.Steering_Angle_Speed,) = _struct_Q17f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q17f = struct.Struct("<Q17f")
