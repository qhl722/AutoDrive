# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/DynamicObstacle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DynamicObstacle(genpy.Message):
  _md5sum = "eda31db303c9b60e362d01b3c33e6bce"
  _type = "av_msgs/DynamicObstacle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 class_id
uint64 id
float32 center_x
float32 center_y
float32 center_z
float32 width
float32 height
float32 length
float32 velocity
# 车头夹角
float32 heading
# 角速度
float32 omega
# 加速度
float32 acceleration
# 遮挡时间，单位 sec
uint32 shield_time

# 测速 box 模型的协方差（用一维数组模拟二维数组，需要转换，6 * 6）
float64[] velocity_measurement_covariance

"""
  __slots__ = ['class_id','id','center_x','center_y','center_z','width','height','length','velocity','heading','omega','acceleration','shield_time','velocity_measurement_covariance']
  _slot_types = ['uint8','uint64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       class_id,id,center_x,center_y,center_z,width,height,length,velocity,heading,omega,acceleration,shield_time,velocity_measurement_covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamicObstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.class_id is None:
        self.class_id = 0
      if self.id is None:
        self.id = 0
      if self.center_x is None:
        self.center_x = 0.
      if self.center_y is None:
        self.center_y = 0.
      if self.center_z is None:
        self.center_z = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.length is None:
        self.length = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.heading is None:
        self.heading = 0.
      if self.omega is None:
        self.omega = 0.
      if self.acceleration is None:
        self.acceleration = 0.
      if self.shield_time is None:
        self.shield_time = 0
      if self.velocity_measurement_covariance is None:
        self.velocity_measurement_covariance = []
    else:
      self.class_id = 0
      self.id = 0
      self.center_x = 0.
      self.center_y = 0.
      self.center_z = 0.
      self.width = 0.
      self.height = 0.
      self.length = 0.
      self.velocity = 0.
      self.heading = 0.
      self.omega = 0.
      self.acceleration = 0.
      self.shield_time = 0
      self.velocity_measurement_covariance = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BQ10fI.pack(_x.class_id, _x.id, _x.center_x, _x.center_y, _x.center_z, _x.width, _x.height, _x.length, _x.velocity, _x.heading, _x.omega, _x.acceleration, _x.shield_time))
      length = len(self.velocity_measurement_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_measurement_covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.class_id, _x.id, _x.center_x, _x.center_y, _x.center_z, _x.width, _x.height, _x.length, _x.velocity, _x.heading, _x.omega, _x.acceleration, _x.shield_time,) = _struct_BQ10fI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_measurement_covariance = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BQ10fI.pack(_x.class_id, _x.id, _x.center_x, _x.center_y, _x.center_z, _x.width, _x.height, _x.length, _x.velocity, _x.heading, _x.omega, _x.acceleration, _x.shield_time))
      length = len(self.velocity_measurement_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_measurement_covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.class_id, _x.id, _x.center_x, _x.center_y, _x.center_z, _x.width, _x.height, _x.length, _x.velocity, _x.heading, _x.omega, _x.acceleration, _x.shield_time,) = _struct_BQ10fI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_measurement_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BQ10fI = struct.Struct("<BQ10fI")
