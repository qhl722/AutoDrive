# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/IbeoObject.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IbeoObject(genpy.Message):
  _md5sum = "eeb943ae30859d40f26de4eba16114d0"
  _type = "av_msgs/IbeoObject"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 object_id
float32 object_box_center_x
float32 object_box_center_y
float32 object_box_length
float32 object_box_width
float32 object_box_orientation
float32 relative_velocity_x
float32 relative_velocity_y
float32 relative_velocity_sigma_x
float32 relative_velocity_sigma_y
uint8 object_class
float32 object_class_certainty
float32 exist_measurement


"""
  __slots__ = ['object_id','object_box_center_x','object_box_center_y','object_box_length','object_box_width','object_box_orientation','relative_velocity_x','relative_velocity_y','relative_velocity_sigma_x','relative_velocity_sigma_y','object_class','object_class_certainty','exist_measurement']
  _slot_types = ['uint16','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_id,object_box_center_x,object_box_center_y,object_box_length,object_box_width,object_box_orientation,relative_velocity_x,relative_velocity_y,relative_velocity_sigma_x,relative_velocity_sigma_y,object_class,object_class_certainty,exist_measurement

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IbeoObject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_id is None:
        self.object_id = 0
      if self.object_box_center_x is None:
        self.object_box_center_x = 0.
      if self.object_box_center_y is None:
        self.object_box_center_y = 0.
      if self.object_box_length is None:
        self.object_box_length = 0.
      if self.object_box_width is None:
        self.object_box_width = 0.
      if self.object_box_orientation is None:
        self.object_box_orientation = 0.
      if self.relative_velocity_x is None:
        self.relative_velocity_x = 0.
      if self.relative_velocity_y is None:
        self.relative_velocity_y = 0.
      if self.relative_velocity_sigma_x is None:
        self.relative_velocity_sigma_x = 0.
      if self.relative_velocity_sigma_y is None:
        self.relative_velocity_sigma_y = 0.
      if self.object_class is None:
        self.object_class = 0
      if self.object_class_certainty is None:
        self.object_class_certainty = 0.
      if self.exist_measurement is None:
        self.exist_measurement = 0.
    else:
      self.object_id = 0
      self.object_box_center_x = 0.
      self.object_box_center_y = 0.
      self.object_box_length = 0.
      self.object_box_width = 0.
      self.object_box_orientation = 0.
      self.relative_velocity_x = 0.
      self.relative_velocity_y = 0.
      self.relative_velocity_sigma_x = 0.
      self.relative_velocity_sigma_y = 0.
      self.object_class = 0
      self.object_class_certainty = 0.
      self.exist_measurement = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_H9fB2f.pack(_x.object_id, _x.object_box_center_x, _x.object_box_center_y, _x.object_box_length, _x.object_box_width, _x.object_box_orientation, _x.relative_velocity_x, _x.relative_velocity_y, _x.relative_velocity_sigma_x, _x.relative_velocity_sigma_y, _x.object_class, _x.object_class_certainty, _x.exist_measurement))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 47
      (_x.object_id, _x.object_box_center_x, _x.object_box_center_y, _x.object_box_length, _x.object_box_width, _x.object_box_orientation, _x.relative_velocity_x, _x.relative_velocity_y, _x.relative_velocity_sigma_x, _x.relative_velocity_sigma_y, _x.object_class, _x.object_class_certainty, _x.exist_measurement,) = _struct_H9fB2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_H9fB2f.pack(_x.object_id, _x.object_box_center_x, _x.object_box_center_y, _x.object_box_length, _x.object_box_width, _x.object_box_orientation, _x.relative_velocity_x, _x.relative_velocity_y, _x.relative_velocity_sigma_x, _x.relative_velocity_sigma_y, _x.object_class, _x.object_class_certainty, _x.exist_measurement))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 47
      (_x.object_id, _x.object_box_center_x, _x.object_box_center_y, _x.object_box_length, _x.object_box_width, _x.object_box_orientation, _x.relative_velocity_x, _x.relative_velocity_y, _x.relative_velocity_sigma_x, _x.relative_velocity_sigma_y, _x.object_class, _x.object_class_certainty, _x.exist_measurement,) = _struct_H9fB2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_H9fB2f = struct.Struct("<H9fB2f")
