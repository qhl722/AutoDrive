/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Ros;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-26")
public class RosService {

  public interface Iface {

    public Trajectory getTrajectory() throws org.apache.thrift.TException;

    public void publishFusionMap(Fusionmap fusion_map) throws org.apache.thrift.TException;

    public void publishTrafficLightDetect(TrafficLightDetect traffic_light_detect) throws org.apache.thrift.TException;

    public void publishLocalize(Localize localize) throws org.apache.thrift.TException;

    public void publishDest(Dest dest) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTrajectory(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publishFusionMap(Fusionmap fusion_map, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publishTrafficLightDetect(TrafficLightDetect traffic_light_detect, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publishLocalize(Localize localize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publishDest(Dest dest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Trajectory getTrajectory() throws org.apache.thrift.TException
    {
      send_getTrajectory();
      return recv_getTrajectory();
    }

    public void send_getTrajectory() throws org.apache.thrift.TException
    {
      getTrajectory_args args = new getTrajectory_args();
      sendBase("getTrajectory", args);
    }

    public Trajectory recv_getTrajectory() throws org.apache.thrift.TException
    {
      getTrajectory_result result = new getTrajectory_result();
      receiveBase(result, "getTrajectory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTrajectory failed: unknown result");
    }

    public void publishFusionMap(Fusionmap fusion_map) throws org.apache.thrift.TException
    {
      send_publishFusionMap(fusion_map);
    }

    public void send_publishFusionMap(Fusionmap fusion_map) throws org.apache.thrift.TException
    {
      publishFusionMap_args args = new publishFusionMap_args();
      args.setFusion_map(fusion_map);
      sendBaseOneway("publishFusionMap", args);
    }

    public void publishTrafficLightDetect(TrafficLightDetect traffic_light_detect) throws org.apache.thrift.TException
    {
      send_publishTrafficLightDetect(traffic_light_detect);
    }

    public void send_publishTrafficLightDetect(TrafficLightDetect traffic_light_detect) throws org.apache.thrift.TException
    {
      publishTrafficLightDetect_args args = new publishTrafficLightDetect_args();
      args.setTraffic_light_detect(traffic_light_detect);
      sendBaseOneway("publishTrafficLightDetect", args);
    }

    public void publishLocalize(Localize localize) throws org.apache.thrift.TException
    {
      send_publishLocalize(localize);
    }

    public void send_publishLocalize(Localize localize) throws org.apache.thrift.TException
    {
      publishLocalize_args args = new publishLocalize_args();
      args.setLocalize(localize);
      sendBaseOneway("publishLocalize", args);
    }

    public void publishDest(Dest dest) throws org.apache.thrift.TException
    {
      send_publishDest(dest);
    }

    public void send_publishDest(Dest dest) throws org.apache.thrift.TException
    {
      publishDest_args args = new publishDest_args();
      args.setDest(dest);
      sendBaseOneway("publishDest", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTrajectory(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTrajectory_call method_call = new getTrajectory_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTrajectory_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getTrajectory_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTrajectory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTrajectory_args args = new getTrajectory_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Trajectory getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTrajectory();
      }
    }

    public void publishFusionMap(Fusionmap fusion_map, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishFusionMap_call method_call = new publishFusionMap_call(fusion_map, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishFusionMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Fusionmap fusion_map;
      public publishFusionMap_call(Fusionmap fusion_map, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.fusion_map = fusion_map;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishFusionMap", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        publishFusionMap_args args = new publishFusionMap_args();
        args.setFusion_map(fusion_map);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void publishTrafficLightDetect(TrafficLightDetect traffic_light_detect, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishTrafficLightDetect_call method_call = new publishTrafficLightDetect_call(traffic_light_detect, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishTrafficLightDetect_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TrafficLightDetect traffic_light_detect;
      public publishTrafficLightDetect_call(TrafficLightDetect traffic_light_detect, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.traffic_light_detect = traffic_light_detect;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishTrafficLightDetect", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        publishTrafficLightDetect_args args = new publishTrafficLightDetect_args();
        args.setTraffic_light_detect(traffic_light_detect);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void publishLocalize(Localize localize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishLocalize_call method_call = new publishLocalize_call(localize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishLocalize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Localize localize;
      public publishLocalize_call(Localize localize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.localize = localize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishLocalize", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        publishLocalize_args args = new publishLocalize_args();
        args.setLocalize(localize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void publishDest(Dest dest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishDest_call method_call = new publishDest_call(dest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishDest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Dest dest;
      public publishDest_call(Dest dest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.dest = dest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishDest", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        publishDest_args args = new publishDest_args();
        args.setDest(dest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTrajectory", new getTrajectory());
      processMap.put("publishFusionMap", new publishFusionMap());
      processMap.put("publishTrafficLightDetect", new publishTrafficLightDetect());
      processMap.put("publishLocalize", new publishLocalize());
      processMap.put("publishDest", new publishDest());
      return processMap;
    }

    public static class getTrajectory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTrajectory_args> {
      public getTrajectory() {
        super("getTrajectory");
      }

      public getTrajectory_args getEmptyArgsInstance() {
        return new getTrajectory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTrajectory_result getResult(I iface, getTrajectory_args args) throws org.apache.thrift.TException {
        getTrajectory_result result = new getTrajectory_result();
        result.success = iface.getTrajectory();
        return result;
      }
    }

    public static class publishFusionMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishFusionMap_args> {
      public publishFusionMap() {
        super("publishFusionMap");
      }

      public publishFusionMap_args getEmptyArgsInstance() {
        return new publishFusionMap_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, publishFusionMap_args args) throws org.apache.thrift.TException {
        iface.publishFusionMap(args.fusion_map);
        return null;
      }
    }

    public static class publishTrafficLightDetect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishTrafficLightDetect_args> {
      public publishTrafficLightDetect() {
        super("publishTrafficLightDetect");
      }

      public publishTrafficLightDetect_args getEmptyArgsInstance() {
        return new publishTrafficLightDetect_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, publishTrafficLightDetect_args args) throws org.apache.thrift.TException {
        iface.publishTrafficLightDetect(args.traffic_light_detect);
        return null;
      }
    }

    public static class publishLocalize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishLocalize_args> {
      public publishLocalize() {
        super("publishLocalize");
      }

      public publishLocalize_args getEmptyArgsInstance() {
        return new publishLocalize_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, publishLocalize_args args) throws org.apache.thrift.TException {
        iface.publishLocalize(args.localize);
        return null;
      }
    }

    public static class publishDest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishDest_args> {
      public publishDest() {
        super("publishDest");
      }

      public publishDest_args getEmptyArgsInstance() {
        return new publishDest_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, publishDest_args args) throws org.apache.thrift.TException {
        iface.publishDest(args.dest);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTrajectory", new getTrajectory());
      processMap.put("publishFusionMap", new publishFusionMap());
      processMap.put("publishTrafficLightDetect", new publishTrafficLightDetect());
      processMap.put("publishLocalize", new publishLocalize());
      processMap.put("publishDest", new publishDest());
      return processMap;
    }

    public static class getTrajectory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTrajectory_args, Trajectory> {
      public getTrajectory() {
        super("getTrajectory");
      }

      public getTrajectory_args getEmptyArgsInstance() {
        return new getTrajectory_args();
      }

      public AsyncMethodCallback<Trajectory> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Trajectory>() { 
          public void onComplete(Trajectory o) {
            getTrajectory_result result = new getTrajectory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTrajectory_result result = new getTrajectory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTrajectory_args args, org.apache.thrift.async.AsyncMethodCallback<Trajectory> resultHandler) throws TException {
        iface.getTrajectory(resultHandler);
      }
    }

    public static class publishFusionMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publishFusionMap_args, Void> {
      public publishFusionMap() {
        super("publishFusionMap");
      }

      public publishFusionMap_args getEmptyArgsInstance() {
        return new publishFusionMap_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, publishFusionMap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.publishFusionMap(args.fusion_map,resultHandler);
      }
    }

    public static class publishTrafficLightDetect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publishTrafficLightDetect_args, Void> {
      public publishTrafficLightDetect() {
        super("publishTrafficLightDetect");
      }

      public publishTrafficLightDetect_args getEmptyArgsInstance() {
        return new publishTrafficLightDetect_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, publishTrafficLightDetect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.publishTrafficLightDetect(args.traffic_light_detect,resultHandler);
      }
    }

    public static class publishLocalize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publishLocalize_args, Void> {
      public publishLocalize() {
        super("publishLocalize");
      }

      public publishLocalize_args getEmptyArgsInstance() {
        return new publishLocalize_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, publishLocalize_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.publishLocalize(args.localize,resultHandler);
      }
    }

    public static class publishDest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publishDest_args, Void> {
      public publishDest() {
        super("publishDest");
      }

      public publishDest_args getEmptyArgsInstance() {
        return new publishDest_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, publishDest_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.publishDest(args.dest,resultHandler);
      }
    }

  }

  public static class getTrajectory_args implements org.apache.thrift.TBase<getTrajectory_args, getTrajectory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTrajectory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTrajectory_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTrajectory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTrajectory_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTrajectory_args.class, metaDataMap);
    }

    public getTrajectory_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTrajectory_args(getTrajectory_args other) {
    }

    public getTrajectory_args deepCopy() {
      return new getTrajectory_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTrajectory_args)
        return this.equals((getTrajectory_args)that);
      return false;
    }

    public boolean equals(getTrajectory_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getTrajectory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTrajectory_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTrajectory_argsStandardSchemeFactory implements SchemeFactory {
      public getTrajectory_argsStandardScheme getScheme() {
        return new getTrajectory_argsStandardScheme();
      }
    }

    private static class getTrajectory_argsStandardScheme extends StandardScheme<getTrajectory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTrajectory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTrajectory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTrajectory_argsTupleSchemeFactory implements SchemeFactory {
      public getTrajectory_argsTupleScheme getScheme() {
        return new getTrajectory_argsTupleScheme();
      }
    }

    private static class getTrajectory_argsTupleScheme extends TupleScheme<getTrajectory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTrajectory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTrajectory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getTrajectory_result implements org.apache.thrift.TBase<getTrajectory_result, getTrajectory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTrajectory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTrajectory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTrajectory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTrajectory_resultTupleSchemeFactory());
    }

    public Trajectory success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Trajectory.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTrajectory_result.class, metaDataMap);
    }

    public getTrajectory_result() {
    }

    public getTrajectory_result(
      Trajectory success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTrajectory_result(getTrajectory_result other) {
      if (other.isSetSuccess()) {
        this.success = new Trajectory(other.success);
      }
    }

    public getTrajectory_result deepCopy() {
      return new getTrajectory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Trajectory getSuccess() {
      return this.success;
    }

    public getTrajectory_result setSuccess(Trajectory success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Trajectory)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTrajectory_result)
        return this.equals((getTrajectory_result)that);
      return false;
    }

    public boolean equals(getTrajectory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTrajectory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTrajectory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTrajectory_resultStandardSchemeFactory implements SchemeFactory {
      public getTrajectory_resultStandardScheme getScheme() {
        return new getTrajectory_resultStandardScheme();
      }
    }

    private static class getTrajectory_resultStandardScheme extends StandardScheme<getTrajectory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTrajectory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Trajectory();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTrajectory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTrajectory_resultTupleSchemeFactory implements SchemeFactory {
      public getTrajectory_resultTupleScheme getScheme() {
        return new getTrajectory_resultTupleScheme();
      }
    }

    private static class getTrajectory_resultTupleScheme extends TupleScheme<getTrajectory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTrajectory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTrajectory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Trajectory();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class publishFusionMap_args implements org.apache.thrift.TBase<publishFusionMap_args, publishFusionMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishFusionMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishFusionMap_args");

    private static final org.apache.thrift.protocol.TField FUSION_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("fusion_map", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishFusionMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishFusionMap_argsTupleSchemeFactory());
    }

    public Fusionmap fusion_map; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUSION_MAP((short)1, "fusion_map");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUSION_MAP
            return FUSION_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUSION_MAP, new org.apache.thrift.meta_data.FieldMetaData("fusion_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Fusionmap.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishFusionMap_args.class, metaDataMap);
    }

    public publishFusionMap_args() {
    }

    public publishFusionMap_args(
      Fusionmap fusion_map)
    {
      this();
      this.fusion_map = fusion_map;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishFusionMap_args(publishFusionMap_args other) {
      if (other.isSetFusion_map()) {
        this.fusion_map = new Fusionmap(other.fusion_map);
      }
    }

    public publishFusionMap_args deepCopy() {
      return new publishFusionMap_args(this);
    }

    @Override
    public void clear() {
      this.fusion_map = null;
    }

    public Fusionmap getFusion_map() {
      return this.fusion_map;
    }

    public publishFusionMap_args setFusion_map(Fusionmap fusion_map) {
      this.fusion_map = fusion_map;
      return this;
    }

    public void unsetFusion_map() {
      this.fusion_map = null;
    }

    /** Returns true if field fusion_map is set (has been assigned a value) and false otherwise */
    public boolean isSetFusion_map() {
      return this.fusion_map != null;
    }

    public void setFusion_mapIsSet(boolean value) {
      if (!value) {
        this.fusion_map = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUSION_MAP:
        if (value == null) {
          unsetFusion_map();
        } else {
          setFusion_map((Fusionmap)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUSION_MAP:
        return getFusion_map();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUSION_MAP:
        return isSetFusion_map();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishFusionMap_args)
        return this.equals((publishFusionMap_args)that);
      return false;
    }

    public boolean equals(publishFusionMap_args that) {
      if (that == null)
        return false;

      boolean this_present_fusion_map = true && this.isSetFusion_map();
      boolean that_present_fusion_map = true && that.isSetFusion_map();
      if (this_present_fusion_map || that_present_fusion_map) {
        if (!(this_present_fusion_map && that_present_fusion_map))
          return false;
        if (!this.fusion_map.equals(that.fusion_map))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fusion_map = true && (isSetFusion_map());
      list.add(present_fusion_map);
      if (present_fusion_map)
        list.add(fusion_map);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishFusionMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFusion_map()).compareTo(other.isSetFusion_map());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFusion_map()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fusion_map, other.fusion_map);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishFusionMap_args(");
      boolean first = true;

      sb.append("fusion_map:");
      if (this.fusion_map == null) {
        sb.append("null");
      } else {
        sb.append(this.fusion_map);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fusion_map != null) {
        fusion_map.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishFusionMap_argsStandardSchemeFactory implements SchemeFactory {
      public publishFusionMap_argsStandardScheme getScheme() {
        return new publishFusionMap_argsStandardScheme();
      }
    }

    private static class publishFusionMap_argsStandardScheme extends StandardScheme<publishFusionMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishFusionMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUSION_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fusion_map = new Fusionmap();
                struct.fusion_map.read(iprot);
                struct.setFusion_mapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishFusionMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fusion_map != null) {
          oprot.writeFieldBegin(FUSION_MAP_FIELD_DESC);
          struct.fusion_map.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishFusionMap_argsTupleSchemeFactory implements SchemeFactory {
      public publishFusionMap_argsTupleScheme getScheme() {
        return new publishFusionMap_argsTupleScheme();
      }
    }

    private static class publishFusionMap_argsTupleScheme extends TupleScheme<publishFusionMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishFusionMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFusion_map()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFusion_map()) {
          struct.fusion_map.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishFusionMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fusion_map = new Fusionmap();
          struct.fusion_map.read(iprot);
          struct.setFusion_mapIsSet(true);
        }
      }
    }

  }

  public static class publishTrafficLightDetect_args implements org.apache.thrift.TBase<publishTrafficLightDetect_args, publishTrafficLightDetect_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishTrafficLightDetect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishTrafficLightDetect_args");

    private static final org.apache.thrift.protocol.TField TRAFFIC_LIGHT_DETECT_FIELD_DESC = new org.apache.thrift.protocol.TField("traffic_light_detect", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishTrafficLightDetect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishTrafficLightDetect_argsTupleSchemeFactory());
    }

    public TrafficLightDetect traffic_light_detect; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRAFFIC_LIGHT_DETECT((short)1, "traffic_light_detect");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRAFFIC_LIGHT_DETECT
            return TRAFFIC_LIGHT_DETECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRAFFIC_LIGHT_DETECT, new org.apache.thrift.meta_data.FieldMetaData("traffic_light_detect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrafficLightDetect.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishTrafficLightDetect_args.class, metaDataMap);
    }

    public publishTrafficLightDetect_args() {
    }

    public publishTrafficLightDetect_args(
      TrafficLightDetect traffic_light_detect)
    {
      this();
      this.traffic_light_detect = traffic_light_detect;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishTrafficLightDetect_args(publishTrafficLightDetect_args other) {
      if (other.isSetTraffic_light_detect()) {
        this.traffic_light_detect = new TrafficLightDetect(other.traffic_light_detect);
      }
    }

    public publishTrafficLightDetect_args deepCopy() {
      return new publishTrafficLightDetect_args(this);
    }

    @Override
    public void clear() {
      this.traffic_light_detect = null;
    }

    public TrafficLightDetect getTraffic_light_detect() {
      return this.traffic_light_detect;
    }

    public publishTrafficLightDetect_args setTraffic_light_detect(TrafficLightDetect traffic_light_detect) {
      this.traffic_light_detect = traffic_light_detect;
      return this;
    }

    public void unsetTraffic_light_detect() {
      this.traffic_light_detect = null;
    }

    /** Returns true if field traffic_light_detect is set (has been assigned a value) and false otherwise */
    public boolean isSetTraffic_light_detect() {
      return this.traffic_light_detect != null;
    }

    public void setTraffic_light_detectIsSet(boolean value) {
      if (!value) {
        this.traffic_light_detect = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRAFFIC_LIGHT_DETECT:
        if (value == null) {
          unsetTraffic_light_detect();
        } else {
          setTraffic_light_detect((TrafficLightDetect)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRAFFIC_LIGHT_DETECT:
        return getTraffic_light_detect();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRAFFIC_LIGHT_DETECT:
        return isSetTraffic_light_detect();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishTrafficLightDetect_args)
        return this.equals((publishTrafficLightDetect_args)that);
      return false;
    }

    public boolean equals(publishTrafficLightDetect_args that) {
      if (that == null)
        return false;

      boolean this_present_traffic_light_detect = true && this.isSetTraffic_light_detect();
      boolean that_present_traffic_light_detect = true && that.isSetTraffic_light_detect();
      if (this_present_traffic_light_detect || that_present_traffic_light_detect) {
        if (!(this_present_traffic_light_detect && that_present_traffic_light_detect))
          return false;
        if (!this.traffic_light_detect.equals(that.traffic_light_detect))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_traffic_light_detect = true && (isSetTraffic_light_detect());
      list.add(present_traffic_light_detect);
      if (present_traffic_light_detect)
        list.add(traffic_light_detect);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishTrafficLightDetect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTraffic_light_detect()).compareTo(other.isSetTraffic_light_detect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraffic_light_detect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traffic_light_detect, other.traffic_light_detect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishTrafficLightDetect_args(");
      boolean first = true;

      sb.append("traffic_light_detect:");
      if (this.traffic_light_detect == null) {
        sb.append("null");
      } else {
        sb.append(this.traffic_light_detect);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (traffic_light_detect != null) {
        traffic_light_detect.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishTrafficLightDetect_argsStandardSchemeFactory implements SchemeFactory {
      public publishTrafficLightDetect_argsStandardScheme getScheme() {
        return new publishTrafficLightDetect_argsStandardScheme();
      }
    }

    private static class publishTrafficLightDetect_argsStandardScheme extends StandardScheme<publishTrafficLightDetect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishTrafficLightDetect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRAFFIC_LIGHT_DETECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.traffic_light_detect = new TrafficLightDetect();
                struct.traffic_light_detect.read(iprot);
                struct.setTraffic_light_detectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishTrafficLightDetect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.traffic_light_detect != null) {
          oprot.writeFieldBegin(TRAFFIC_LIGHT_DETECT_FIELD_DESC);
          struct.traffic_light_detect.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishTrafficLightDetect_argsTupleSchemeFactory implements SchemeFactory {
      public publishTrafficLightDetect_argsTupleScheme getScheme() {
        return new publishTrafficLightDetect_argsTupleScheme();
      }
    }

    private static class publishTrafficLightDetect_argsTupleScheme extends TupleScheme<publishTrafficLightDetect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishTrafficLightDetect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTraffic_light_detect()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTraffic_light_detect()) {
          struct.traffic_light_detect.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishTrafficLightDetect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.traffic_light_detect = new TrafficLightDetect();
          struct.traffic_light_detect.read(iprot);
          struct.setTraffic_light_detectIsSet(true);
        }
      }
    }

  }

  public static class publishLocalize_args implements org.apache.thrift.TBase<publishLocalize_args, publishLocalize_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishLocalize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishLocalize_args");

    private static final org.apache.thrift.protocol.TField LOCALIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("localize", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishLocalize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishLocalize_argsTupleSchemeFactory());
    }

    public Localize localize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALIZE((short)1, "localize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALIZE
            return LOCALIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALIZE, new org.apache.thrift.meta_data.FieldMetaData("localize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Localize.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishLocalize_args.class, metaDataMap);
    }

    public publishLocalize_args() {
    }

    public publishLocalize_args(
      Localize localize)
    {
      this();
      this.localize = localize;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishLocalize_args(publishLocalize_args other) {
      if (other.isSetLocalize()) {
        this.localize = new Localize(other.localize);
      }
    }

    public publishLocalize_args deepCopy() {
      return new publishLocalize_args(this);
    }

    @Override
    public void clear() {
      this.localize = null;
    }

    public Localize getLocalize() {
      return this.localize;
    }

    public publishLocalize_args setLocalize(Localize localize) {
      this.localize = localize;
      return this;
    }

    public void unsetLocalize() {
      this.localize = null;
    }

    /** Returns true if field localize is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalize() {
      return this.localize != null;
    }

    public void setLocalizeIsSet(boolean value) {
      if (!value) {
        this.localize = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCALIZE:
        if (value == null) {
          unsetLocalize();
        } else {
          setLocalize((Localize)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALIZE:
        return getLocalize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCALIZE:
        return isSetLocalize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishLocalize_args)
        return this.equals((publishLocalize_args)that);
      return false;
    }

    public boolean equals(publishLocalize_args that) {
      if (that == null)
        return false;

      boolean this_present_localize = true && this.isSetLocalize();
      boolean that_present_localize = true && that.isSetLocalize();
      if (this_present_localize || that_present_localize) {
        if (!(this_present_localize && that_present_localize))
          return false;
        if (!this.localize.equals(that.localize))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_localize = true && (isSetLocalize());
      list.add(present_localize);
      if (present_localize)
        list.add(localize);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishLocalize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocalize()).compareTo(other.isSetLocalize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localize, other.localize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishLocalize_args(");
      boolean first = true;

      sb.append("localize:");
      if (this.localize == null) {
        sb.append("null");
      } else {
        sb.append(this.localize);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (localize != null) {
        localize.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishLocalize_argsStandardSchemeFactory implements SchemeFactory {
      public publishLocalize_argsStandardScheme getScheme() {
        return new publishLocalize_argsStandardScheme();
      }
    }

    private static class publishLocalize_argsStandardScheme extends StandardScheme<publishLocalize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishLocalize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.localize = new Localize();
                struct.localize.read(iprot);
                struct.setLocalizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishLocalize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.localize != null) {
          oprot.writeFieldBegin(LOCALIZE_FIELD_DESC);
          struct.localize.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishLocalize_argsTupleSchemeFactory implements SchemeFactory {
      public publishLocalize_argsTupleScheme getScheme() {
        return new publishLocalize_argsTupleScheme();
      }
    }

    private static class publishLocalize_argsTupleScheme extends TupleScheme<publishLocalize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishLocalize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocalize()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocalize()) {
          struct.localize.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishLocalize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.localize = new Localize();
          struct.localize.read(iprot);
          struct.setLocalizeIsSet(true);
        }
      }
    }

  }

  public static class publishDest_args implements org.apache.thrift.TBase<publishDest_args, publishDest_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishDest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishDest_args");

    private static final org.apache.thrift.protocol.TField DEST_FIELD_DESC = new org.apache.thrift.protocol.TField("dest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishDest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishDest_argsTupleSchemeFactory());
    }

    public Dest dest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEST((short)1, "dest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEST
            return DEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEST, new org.apache.thrift.meta_data.FieldMetaData("dest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishDest_args.class, metaDataMap);
    }

    public publishDest_args() {
    }

    public publishDest_args(
      Dest dest)
    {
      this();
      this.dest = dest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishDest_args(publishDest_args other) {
      if (other.isSetDest()) {
        this.dest = new Dest(other.dest);
      }
    }

    public publishDest_args deepCopy() {
      return new publishDest_args(this);
    }

    @Override
    public void clear() {
      this.dest = null;
    }

    public Dest getDest() {
      return this.dest;
    }

    public publishDest_args setDest(Dest dest) {
      this.dest = dest;
      return this;
    }

    public void unsetDest() {
      this.dest = null;
    }

    /** Returns true if field dest is set (has been assigned a value) and false otherwise */
    public boolean isSetDest() {
      return this.dest != null;
    }

    public void setDestIsSet(boolean value) {
      if (!value) {
        this.dest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEST:
        if (value == null) {
          unsetDest();
        } else {
          setDest((Dest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEST:
        return getDest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEST:
        return isSetDest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishDest_args)
        return this.equals((publishDest_args)that);
      return false;
    }

    public boolean equals(publishDest_args that) {
      if (that == null)
        return false;

      boolean this_present_dest = true && this.isSetDest();
      boolean that_present_dest = true && that.isSetDest();
      if (this_present_dest || that_present_dest) {
        if (!(this_present_dest && that_present_dest))
          return false;
        if (!this.dest.equals(that.dest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dest = true && (isSetDest());
      list.add(present_dest);
      if (present_dest)
        list.add(dest);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishDest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDest()).compareTo(other.isSetDest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest, other.dest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishDest_args(");
      boolean first = true;

      sb.append("dest:");
      if (this.dest == null) {
        sb.append("null");
      } else {
        sb.append(this.dest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dest != null) {
        dest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishDest_argsStandardSchemeFactory implements SchemeFactory {
      public publishDest_argsStandardScheme getScheme() {
        return new publishDest_argsStandardScheme();
      }
    }

    private static class publishDest_argsStandardScheme extends StandardScheme<publishDest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishDest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dest = new Dest();
                struct.dest.read(iprot);
                struct.setDestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishDest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dest != null) {
          oprot.writeFieldBegin(DEST_FIELD_DESC);
          struct.dest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishDest_argsTupleSchemeFactory implements SchemeFactory {
      public publishDest_argsTupleScheme getScheme() {
        return new publishDest_argsTupleScheme();
      }
    }

    private static class publishDest_argsTupleScheme extends TupleScheme<publishDest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishDest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDest()) {
          struct.dest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishDest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dest = new Dest();
          struct.dest.read(iprot);
          struct.setDestIsSet(true);
        }
      }
    }

  }

}
