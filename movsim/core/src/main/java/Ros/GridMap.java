/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Ros;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-26")
public class GridMap implements org.apache.thrift.TBase<GridMap, GridMap._Fields>, java.io.Serializable, Cloneable, Comparable<GridMap> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GridMap");

  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CENTER_X_FIELD_DESC = new org.apache.thrift.protocol.TField("center_x", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CENTER_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("center_y", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField GRID_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("grid_map", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GridMapStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GridMapTupleSchemeFactory());
  }

  public int width; // required
  public int length; // required
  public int center_x; // required
  public int center_y; // required
  public List<Short> grid_map; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WIDTH((short)1, "width"),
    LENGTH((short)2, "length"),
    CENTER_X((short)3, "center_x"),
    CENTER_Y((short)4, "center_y"),
    GRID_MAP((short)5, "grid_map");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WIDTH
          return WIDTH;
        case 2: // LENGTH
          return LENGTH;
        case 3: // CENTER_X
          return CENTER_X;
        case 4: // CENTER_Y
          return CENTER_Y;
        case 5: // GRID_MAP
          return GRID_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WIDTH_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private static final int __CENTER_X_ISSET_ID = 2;
  private static final int __CENTER_Y_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CENTER_X, new org.apache.thrift.meta_data.FieldMetaData("center_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CENTER_Y, new org.apache.thrift.meta_data.FieldMetaData("center_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GRID_MAP, new org.apache.thrift.meta_data.FieldMetaData("grid_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GridMap.class, metaDataMap);
  }

  public GridMap() {
  }

  public GridMap(
    int width,
    int length,
    int center_x,
    int center_y,
    List<Short> grid_map)
  {
    this();
    this.width = width;
    setWidthIsSet(true);
    this.length = length;
    setLengthIsSet(true);
    this.center_x = center_x;
    setCenter_xIsSet(true);
    this.center_y = center_y;
    setCenter_yIsSet(true);
    this.grid_map = grid_map;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GridMap(GridMap other) {
    __isset_bitfield = other.__isset_bitfield;
    this.width = other.width;
    this.length = other.length;
    this.center_x = other.center_x;
    this.center_y = other.center_y;
    if (other.isSetGrid_map()) {
      List<Short> __this__grid_map = new ArrayList<Short>(other.grid_map);
      this.grid_map = __this__grid_map;
    }
  }

  public GridMap deepCopy() {
    return new GridMap(this);
  }

  @Override
  public void clear() {
    setWidthIsSet(false);
    this.width = 0;
    setLengthIsSet(false);
    this.length = 0;
    setCenter_xIsSet(false);
    this.center_x = 0;
    setCenter_yIsSet(false);
    this.center_y = 0;
    this.grid_map = null;
  }

  public int getWidth() {
    return this.width;
  }

  public GridMap setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public int getLength() {
    return this.length;
  }

  public GridMap setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public int getCenter_x() {
    return this.center_x;
  }

  public GridMap setCenter_x(int center_x) {
    this.center_x = center_x;
    setCenter_xIsSet(true);
    return this;
  }

  public void unsetCenter_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTER_X_ISSET_ID);
  }

  /** Returns true if field center_x is set (has been assigned a value) and false otherwise */
  public boolean isSetCenter_x() {
    return EncodingUtils.testBit(__isset_bitfield, __CENTER_X_ISSET_ID);
  }

  public void setCenter_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTER_X_ISSET_ID, value);
  }

  public int getCenter_y() {
    return this.center_y;
  }

  public GridMap setCenter_y(int center_y) {
    this.center_y = center_y;
    setCenter_yIsSet(true);
    return this;
  }

  public void unsetCenter_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTER_Y_ISSET_ID);
  }

  /** Returns true if field center_y is set (has been assigned a value) and false otherwise */
  public boolean isSetCenter_y() {
    return EncodingUtils.testBit(__isset_bitfield, __CENTER_Y_ISSET_ID);
  }

  public void setCenter_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTER_Y_ISSET_ID, value);
  }

  public int getGrid_mapSize() {
    return (this.grid_map == null) ? 0 : this.grid_map.size();
  }

  public java.util.Iterator<Short> getGrid_mapIterator() {
    return (this.grid_map == null) ? null : this.grid_map.iterator();
  }

  public void addToGrid_map(short elem) {
    if (this.grid_map == null) {
      this.grid_map = new ArrayList<Short>();
    }
    this.grid_map.add(elem);
  }

  public List<Short> getGrid_map() {
    return this.grid_map;
  }

  public GridMap setGrid_map(List<Short> grid_map) {
    this.grid_map = grid_map;
    return this;
  }

  public void unsetGrid_map() {
    this.grid_map = null;
  }

  /** Returns true if field grid_map is set (has been assigned a value) and false otherwise */
  public boolean isSetGrid_map() {
    return this.grid_map != null;
  }

  public void setGrid_mapIsSet(boolean value) {
    if (!value) {
      this.grid_map = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    case CENTER_X:
      if (value == null) {
        unsetCenter_x();
      } else {
        setCenter_x((Integer)value);
      }
      break;

    case CENTER_Y:
      if (value == null) {
        unsetCenter_y();
      } else {
        setCenter_y((Integer)value);
      }
      break;

    case GRID_MAP:
      if (value == null) {
        unsetGrid_map();
      } else {
        setGrid_map((List<Short>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WIDTH:
      return getWidth();

    case LENGTH:
      return getLength();

    case CENTER_X:
      return getCenter_x();

    case CENTER_Y:
      return getCenter_y();

    case GRID_MAP:
      return getGrid_map();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WIDTH:
      return isSetWidth();
    case LENGTH:
      return isSetLength();
    case CENTER_X:
      return isSetCenter_x();
    case CENTER_Y:
      return isSetCenter_y();
    case GRID_MAP:
      return isSetGrid_map();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GridMap)
      return this.equals((GridMap)that);
    return false;
  }

  public boolean equals(GridMap that) {
    if (that == null)
      return false;

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_center_x = true;
    boolean that_present_center_x = true;
    if (this_present_center_x || that_present_center_x) {
      if (!(this_present_center_x && that_present_center_x))
        return false;
      if (this.center_x != that.center_x)
        return false;
    }

    boolean this_present_center_y = true;
    boolean that_present_center_y = true;
    if (this_present_center_y || that_present_center_y) {
      if (!(this_present_center_y && that_present_center_y))
        return false;
      if (this.center_y != that.center_y)
        return false;
    }

    boolean this_present_grid_map = true && this.isSetGrid_map();
    boolean that_present_grid_map = true && that.isSetGrid_map();
    if (this_present_grid_map || that_present_grid_map) {
      if (!(this_present_grid_map && that_present_grid_map))
        return false;
      if (!this.grid_map.equals(that.grid_map))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_width = true;
    list.add(present_width);
    if (present_width)
      list.add(width);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    boolean present_center_x = true;
    list.add(present_center_x);
    if (present_center_x)
      list.add(center_x);

    boolean present_center_y = true;
    list.add(present_center_y);
    if (present_center_y)
      list.add(center_y);

    boolean present_grid_map = true && (isSetGrid_map());
    list.add(present_grid_map);
    if (present_grid_map)
      list.add(grid_map);

    return list.hashCode();
  }

  @Override
  public int compareTo(GridMap other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCenter_x()).compareTo(other.isSetCenter_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenter_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.center_x, other.center_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCenter_y()).compareTo(other.isSetCenter_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenter_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.center_y, other.center_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrid_map()).compareTo(other.isSetGrid_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrid_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grid_map, other.grid_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GridMap(");
    boolean first = true;

    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("center_x:");
    sb.append(this.center_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("center_y:");
    sb.append(this.center_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("grid_map:");
    if (this.grid_map == null) {
      sb.append("null");
    } else {
      sb.append(this.grid_map);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GridMapStandardSchemeFactory implements SchemeFactory {
    public GridMapStandardScheme getScheme() {
      return new GridMapStandardScheme();
    }
  }

  private static class GridMapStandardScheme extends StandardScheme<GridMap> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GridMap struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length = iprot.readI32();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CENTER_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.center_x = iprot.readI32();
              struct.setCenter_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CENTER_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.center_y = iprot.readI32();
              struct.setCenter_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GRID_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.grid_map = new ArrayList<Short>(_list0.size);
                short _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI16();
                  struct.grid_map.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setGrid_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GridMap struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CENTER_X_FIELD_DESC);
      oprot.writeI32(struct.center_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CENTER_Y_FIELD_DESC);
      oprot.writeI32(struct.center_y);
      oprot.writeFieldEnd();
      if (struct.grid_map != null) {
        oprot.writeFieldBegin(GRID_MAP_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.grid_map.size()));
          for (short _iter3 : struct.grid_map)
          {
            oprot.writeI16(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GridMapTupleSchemeFactory implements SchemeFactory {
    public GridMapTupleScheme getScheme() {
      return new GridMapTupleScheme();
    }
  }

  private static class GridMapTupleScheme extends TupleScheme<GridMap> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GridMap struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWidth()) {
        optionals.set(0);
      }
      if (struct.isSetLength()) {
        optionals.set(1);
      }
      if (struct.isSetCenter_x()) {
        optionals.set(2);
      }
      if (struct.isSetCenter_y()) {
        optionals.set(3);
      }
      if (struct.isSetGrid_map()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetLength()) {
        oprot.writeI32(struct.length);
      }
      if (struct.isSetCenter_x()) {
        oprot.writeI32(struct.center_x);
      }
      if (struct.isSetCenter_y()) {
        oprot.writeI32(struct.center_y);
      }
      if (struct.isSetGrid_map()) {
        {
          oprot.writeI32(struct.grid_map.size());
          for (short _iter4 : struct.grid_map)
          {
            oprot.writeI16(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GridMap struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(1)) {
        struct.length = iprot.readI32();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.center_x = iprot.readI32();
        struct.setCenter_xIsSet(true);
      }
      if (incoming.get(3)) {
        struct.center_y = iprot.readI32();
        struct.setCenter_yIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.grid_map = new ArrayList<Short>(_list5.size);
          short _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI16();
            struct.grid_map.add(_elem6);
          }
        }
        struct.setGrid_mapIsSet(true);
      }
    }
  }

}

