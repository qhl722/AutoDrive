/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Ros;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-26")
public class SectionList implements org.apache.thrift.TBase<SectionList, SectionList._Fields>, java.io.Serializable, Cloneable, Comparable<SectionList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SectionList");

  private static final org.apache.thrift.protocol.TField LANE_MARKER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("lane_marker_list", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SECTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("section_type", org.apache.thrift.protocol.TType.I16, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SectionListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SectionListTupleSchemeFactory());
  }

  public List<LaneMarker> lane_marker_list; // required
  public short section_type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LANE_MARKER_LIST((short)1, "lane_marker_list"),
    SECTION_TYPE((short)2, "section_type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LANE_MARKER_LIST
          return LANE_MARKER_LIST;
        case 2: // SECTION_TYPE
          return SECTION_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SECTION_TYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LANE_MARKER_LIST, new org.apache.thrift.meta_data.FieldMetaData("lane_marker_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LaneMarker.class))));
    tmpMap.put(_Fields.SECTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("section_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SectionList.class, metaDataMap);
  }

  public SectionList() {
  }

  public SectionList(
    List<LaneMarker> lane_marker_list,
    short section_type)
  {
    this();
    this.lane_marker_list = lane_marker_list;
    this.section_type = section_type;
    setSection_typeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SectionList(SectionList other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLane_marker_list()) {
      List<LaneMarker> __this__lane_marker_list = new ArrayList<LaneMarker>(other.lane_marker_list.size());
      for (LaneMarker other_element : other.lane_marker_list) {
        __this__lane_marker_list.add(new LaneMarker(other_element));
      }
      this.lane_marker_list = __this__lane_marker_list;
    }
    this.section_type = other.section_type;
  }

  public SectionList deepCopy() {
    return new SectionList(this);
  }

  @Override
  public void clear() {
    this.lane_marker_list = null;
    setSection_typeIsSet(false);
    this.section_type = 0;
  }

  public int getLane_marker_listSize() {
    return (this.lane_marker_list == null) ? 0 : this.lane_marker_list.size();
  }

  public java.util.Iterator<LaneMarker> getLane_marker_listIterator() {
    return (this.lane_marker_list == null) ? null : this.lane_marker_list.iterator();
  }

  public void addToLane_marker_list(LaneMarker elem) {
    if (this.lane_marker_list == null) {
      this.lane_marker_list = new ArrayList<LaneMarker>();
    }
    this.lane_marker_list.add(elem);
  }

  public List<LaneMarker> getLane_marker_list() {
    return this.lane_marker_list;
  }

  public SectionList setLane_marker_list(List<LaneMarker> lane_marker_list) {
    this.lane_marker_list = lane_marker_list;
    return this;
  }

  public void unsetLane_marker_list() {
    this.lane_marker_list = null;
  }

  /** Returns true if field lane_marker_list is set (has been assigned a value) and false otherwise */
  public boolean isSetLane_marker_list() {
    return this.lane_marker_list != null;
  }

  public void setLane_marker_listIsSet(boolean value) {
    if (!value) {
      this.lane_marker_list = null;
    }
  }

  public short getSection_type() {
    return this.section_type;
  }

  public SectionList setSection_type(short section_type) {
    this.section_type = section_type;
    setSection_typeIsSet(true);
    return this;
  }

  public void unsetSection_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECTION_TYPE_ISSET_ID);
  }

  /** Returns true if field section_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSection_type() {
    return EncodingUtils.testBit(__isset_bitfield, __SECTION_TYPE_ISSET_ID);
  }

  public void setSection_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECTION_TYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LANE_MARKER_LIST:
      if (value == null) {
        unsetLane_marker_list();
      } else {
        setLane_marker_list((List<LaneMarker>)value);
      }
      break;

    case SECTION_TYPE:
      if (value == null) {
        unsetSection_type();
      } else {
        setSection_type((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LANE_MARKER_LIST:
      return getLane_marker_list();

    case SECTION_TYPE:
      return getSection_type();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LANE_MARKER_LIST:
      return isSetLane_marker_list();
    case SECTION_TYPE:
      return isSetSection_type();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SectionList)
      return this.equals((SectionList)that);
    return false;
  }

  public boolean equals(SectionList that) {
    if (that == null)
      return false;

    boolean this_present_lane_marker_list = true && this.isSetLane_marker_list();
    boolean that_present_lane_marker_list = true && that.isSetLane_marker_list();
    if (this_present_lane_marker_list || that_present_lane_marker_list) {
      if (!(this_present_lane_marker_list && that_present_lane_marker_list))
        return false;
      if (!this.lane_marker_list.equals(that.lane_marker_list))
        return false;
    }

    boolean this_present_section_type = true;
    boolean that_present_section_type = true;
    if (this_present_section_type || that_present_section_type) {
      if (!(this_present_section_type && that_present_section_type))
        return false;
      if (this.section_type != that.section_type)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lane_marker_list = true && (isSetLane_marker_list());
    list.add(present_lane_marker_list);
    if (present_lane_marker_list)
      list.add(lane_marker_list);

    boolean present_section_type = true;
    list.add(present_section_type);
    if (present_section_type)
      list.add(section_type);

    return list.hashCode();
  }

  @Override
  public int compareTo(SectionList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLane_marker_list()).compareTo(other.isSetLane_marker_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLane_marker_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lane_marker_list, other.lane_marker_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSection_type()).compareTo(other.isSetSection_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSection_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section_type, other.section_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SectionList(");
    boolean first = true;

    sb.append("lane_marker_list:");
    if (this.lane_marker_list == null) {
      sb.append("null");
    } else {
      sb.append(this.lane_marker_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("section_type:");
    sb.append(this.section_type);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SectionListStandardSchemeFactory implements SchemeFactory {
    public SectionListStandardScheme getScheme() {
      return new SectionListStandardScheme();
    }
  }

  private static class SectionListStandardScheme extends StandardScheme<SectionList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SectionList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LANE_MARKER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.lane_marker_list = new ArrayList<LaneMarker>(_list16.size);
                LaneMarker _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new LaneMarker();
                  _elem17.read(iprot);
                  struct.lane_marker_list.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setLane_marker_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SECTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.section_type = iprot.readI16();
              struct.setSection_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SectionList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lane_marker_list != null) {
        oprot.writeFieldBegin(LANE_MARKER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lane_marker_list.size()));
          for (LaneMarker _iter19 : struct.lane_marker_list)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SECTION_TYPE_FIELD_DESC);
      oprot.writeI16(struct.section_type);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SectionListTupleSchemeFactory implements SchemeFactory {
    public SectionListTupleScheme getScheme() {
      return new SectionListTupleScheme();
    }
  }

  private static class SectionListTupleScheme extends TupleScheme<SectionList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SectionList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLane_marker_list()) {
        optionals.set(0);
      }
      if (struct.isSetSection_type()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLane_marker_list()) {
        {
          oprot.writeI32(struct.lane_marker_list.size());
          for (LaneMarker _iter20 : struct.lane_marker_list)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetSection_type()) {
        oprot.writeI16(struct.section_type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SectionList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lane_marker_list = new ArrayList<LaneMarker>(_list21.size);
          LaneMarker _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new LaneMarker();
            _elem22.read(iprot);
            struct.lane_marker_list.add(_elem22);
          }
        }
        struct.setLane_marker_listIsSet(true);
      }
      if (incoming.get(1)) {
        struct.section_type = iprot.readI16();
        struct.setSection_typeIsSet(true);
      }
    }
  }

}

