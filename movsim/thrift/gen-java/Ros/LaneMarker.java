/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Ros;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-26")
public class LaneMarker implements org.apache.thrift.TBase<LaneMarker, LaneMarker._Fields>, java.io.Serializable, Cloneable, Comparable<LaneMarker> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LaneMarker");

  private static final org.apache.thrift.protocol.TField PAINT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paint_type", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField WAYPOINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("waypoints", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LaneMarkerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LaneMarkerTupleSchemeFactory());
  }

  public short paint_type; // required
  public List<WayPoint> waypoints; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAINT_TYPE((short)1, "paint_type"),
    WAYPOINTS((short)2, "waypoints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAINT_TYPE
          return PAINT_TYPE;
        case 2: // WAYPOINTS
          return WAYPOINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAINT_TYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAINT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paint_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.WAYPOINTS, new org.apache.thrift.meta_data.FieldMetaData("waypoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WayPoint.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LaneMarker.class, metaDataMap);
  }

  public LaneMarker() {
  }

  public LaneMarker(
    short paint_type,
    List<WayPoint> waypoints)
  {
    this();
    this.paint_type = paint_type;
    setPaint_typeIsSet(true);
    this.waypoints = waypoints;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LaneMarker(LaneMarker other) {
    __isset_bitfield = other.__isset_bitfield;
    this.paint_type = other.paint_type;
    if (other.isSetWaypoints()) {
      List<WayPoint> __this__waypoints = new ArrayList<WayPoint>(other.waypoints.size());
      for (WayPoint other_element : other.waypoints) {
        __this__waypoints.add(new WayPoint(other_element));
      }
      this.waypoints = __this__waypoints;
    }
  }

  public LaneMarker deepCopy() {
    return new LaneMarker(this);
  }

  @Override
  public void clear() {
    setPaint_typeIsSet(false);
    this.paint_type = 0;
    this.waypoints = null;
  }

  public short getPaint_type() {
    return this.paint_type;
  }

  public LaneMarker setPaint_type(short paint_type) {
    this.paint_type = paint_type;
    setPaint_typeIsSet(true);
    return this;
  }

  public void unsetPaint_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAINT_TYPE_ISSET_ID);
  }

  /** Returns true if field paint_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPaint_type() {
    return EncodingUtils.testBit(__isset_bitfield, __PAINT_TYPE_ISSET_ID);
  }

  public void setPaint_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAINT_TYPE_ISSET_ID, value);
  }

  public int getWaypointsSize() {
    return (this.waypoints == null) ? 0 : this.waypoints.size();
  }

  public java.util.Iterator<WayPoint> getWaypointsIterator() {
    return (this.waypoints == null) ? null : this.waypoints.iterator();
  }

  public void addToWaypoints(WayPoint elem) {
    if (this.waypoints == null) {
      this.waypoints = new ArrayList<WayPoint>();
    }
    this.waypoints.add(elem);
  }

  public List<WayPoint> getWaypoints() {
    return this.waypoints;
  }

  public LaneMarker setWaypoints(List<WayPoint> waypoints) {
    this.waypoints = waypoints;
    return this;
  }

  public void unsetWaypoints() {
    this.waypoints = null;
  }

  /** Returns true if field waypoints is set (has been assigned a value) and false otherwise */
  public boolean isSetWaypoints() {
    return this.waypoints != null;
  }

  public void setWaypointsIsSet(boolean value) {
    if (!value) {
      this.waypoints = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAINT_TYPE:
      if (value == null) {
        unsetPaint_type();
      } else {
        setPaint_type((Short)value);
      }
      break;

    case WAYPOINTS:
      if (value == null) {
        unsetWaypoints();
      } else {
        setWaypoints((List<WayPoint>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAINT_TYPE:
      return getPaint_type();

    case WAYPOINTS:
      return getWaypoints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAINT_TYPE:
      return isSetPaint_type();
    case WAYPOINTS:
      return isSetWaypoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LaneMarker)
      return this.equals((LaneMarker)that);
    return false;
  }

  public boolean equals(LaneMarker that) {
    if (that == null)
      return false;

    boolean this_present_paint_type = true;
    boolean that_present_paint_type = true;
    if (this_present_paint_type || that_present_paint_type) {
      if (!(this_present_paint_type && that_present_paint_type))
        return false;
      if (this.paint_type != that.paint_type)
        return false;
    }

    boolean this_present_waypoints = true && this.isSetWaypoints();
    boolean that_present_waypoints = true && that.isSetWaypoints();
    if (this_present_waypoints || that_present_waypoints) {
      if (!(this_present_waypoints && that_present_waypoints))
        return false;
      if (!this.waypoints.equals(that.waypoints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_paint_type = true;
    list.add(present_paint_type);
    if (present_paint_type)
      list.add(paint_type);

    boolean present_waypoints = true && (isSetWaypoints());
    list.add(present_waypoints);
    if (present_waypoints)
      list.add(waypoints);

    return list.hashCode();
  }

  @Override
  public int compareTo(LaneMarker other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPaint_type()).compareTo(other.isSetPaint_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaint_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paint_type, other.paint_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaypoints()).compareTo(other.isSetWaypoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaypoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waypoints, other.waypoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LaneMarker(");
    boolean first = true;

    sb.append("paint_type:");
    sb.append(this.paint_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waypoints:");
    if (this.waypoints == null) {
      sb.append("null");
    } else {
      sb.append(this.waypoints);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LaneMarkerStandardSchemeFactory implements SchemeFactory {
    public LaneMarkerStandardScheme getScheme() {
      return new LaneMarkerStandardScheme();
    }
  }

  private static class LaneMarkerStandardScheme extends StandardScheme<LaneMarker> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LaneMarker struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAINT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.paint_type = iprot.readI16();
              struct.setPaint_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WAYPOINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.waypoints = new ArrayList<WayPoint>(_list8.size);
                WayPoint _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new WayPoint();
                  _elem9.read(iprot);
                  struct.waypoints.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setWaypointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LaneMarker struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAINT_TYPE_FIELD_DESC);
      oprot.writeI16(struct.paint_type);
      oprot.writeFieldEnd();
      if (struct.waypoints != null) {
        oprot.writeFieldBegin(WAYPOINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.waypoints.size()));
          for (WayPoint _iter11 : struct.waypoints)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LaneMarkerTupleSchemeFactory implements SchemeFactory {
    public LaneMarkerTupleScheme getScheme() {
      return new LaneMarkerTupleScheme();
    }
  }

  private static class LaneMarkerTupleScheme extends TupleScheme<LaneMarker> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LaneMarker struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPaint_type()) {
        optionals.set(0);
      }
      if (struct.isSetWaypoints()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPaint_type()) {
        oprot.writeI16(struct.paint_type);
      }
      if (struct.isSetWaypoints()) {
        {
          oprot.writeI32(struct.waypoints.size());
          for (WayPoint _iter12 : struct.waypoints)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LaneMarker struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.paint_type = iprot.readI16();
        struct.setPaint_typeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.waypoints = new ArrayList<WayPoint>(_list13.size);
          WayPoint _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new WayPoint();
            _elem14.read(iprot);
            struct.waypoints.add(_elem14);
          }
        }
        struct.setWaypointsIsSet(true);
      }
    }
  }

}

