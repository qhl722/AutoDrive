/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Ros;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-26")
public class DynamicObstacle implements org.apache.thrift.TBase<DynamicObstacle, DynamicObstacle._Fields>, java.io.Serializable, Cloneable, Comparable<DynamicObstacle> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DynamicObstacle");

  private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("class_id", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CENTER_X_FIELD_DESC = new org.apache.thrift.protocol.TField("center_x", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CENTER_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("center_y", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CENTER_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("center_z", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("velocity", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField HEADING_FIELD_DESC = new org.apache.thrift.protocol.TField("heading", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField OMEGA_FIELD_DESC = new org.apache.thrift.protocol.TField("omega", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ACCELERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("acceleration", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField SHIELD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("shield_time", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField VELOCITY_MEASUREMENT_COVARIANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("velocity_measurement_covariance", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DynamicObstacleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DynamicObstacleTupleSchemeFactory());
  }

  public short class_id; // required
  public long id; // required
  public double center_x; // required
  public double center_y; // required
  public double center_z; // required
  public double width; // required
  public double height; // required
  public double length; // required
  public double velocity; // required
  public double heading; // required
  public double omega; // required
  public double acceleration; // required
  public double shield_time; // required
  public List<Double> velocity_measurement_covariance; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLASS_ID((short)1, "class_id"),
    ID((short)2, "id"),
    CENTER_X((short)3, "center_x"),
    CENTER_Y((short)4, "center_y"),
    CENTER_Z((short)5, "center_z"),
    WIDTH((short)6, "width"),
    HEIGHT((short)7, "height"),
    LENGTH((short)8, "length"),
    VELOCITY((short)9, "velocity"),
    HEADING((short)10, "heading"),
    OMEGA((short)11, "omega"),
    ACCELERATION((short)12, "acceleration"),
    SHIELD_TIME((short)13, "shield_time"),
    VELOCITY_MEASUREMENT_COVARIANCE((short)14, "velocity_measurement_covariance");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLASS_ID
          return CLASS_ID;
        case 2: // ID
          return ID;
        case 3: // CENTER_X
          return CENTER_X;
        case 4: // CENTER_Y
          return CENTER_Y;
        case 5: // CENTER_Z
          return CENTER_Z;
        case 6: // WIDTH
          return WIDTH;
        case 7: // HEIGHT
          return HEIGHT;
        case 8: // LENGTH
          return LENGTH;
        case 9: // VELOCITY
          return VELOCITY;
        case 10: // HEADING
          return HEADING;
        case 11: // OMEGA
          return OMEGA;
        case 12: // ACCELERATION
          return ACCELERATION;
        case 13: // SHIELD_TIME
          return SHIELD_TIME;
        case 14: // VELOCITY_MEASUREMENT_COVARIANCE
          return VELOCITY_MEASUREMENT_COVARIANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLASS_ID_ISSET_ID = 0;
  private static final int __ID_ISSET_ID = 1;
  private static final int __CENTER_X_ISSET_ID = 2;
  private static final int __CENTER_Y_ISSET_ID = 3;
  private static final int __CENTER_Z_ISSET_ID = 4;
  private static final int __WIDTH_ISSET_ID = 5;
  private static final int __HEIGHT_ISSET_ID = 6;
  private static final int __LENGTH_ISSET_ID = 7;
  private static final int __VELOCITY_ISSET_ID = 8;
  private static final int __HEADING_ISSET_ID = 9;
  private static final int __OMEGA_ISSET_ID = 10;
  private static final int __ACCELERATION_ISSET_ID = 11;
  private static final int __SHIELD_TIME_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("class_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CENTER_X, new org.apache.thrift.meta_data.FieldMetaData("center_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CENTER_Y, new org.apache.thrift.meta_data.FieldMetaData("center_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CENTER_Z, new org.apache.thrift.meta_data.FieldMetaData("center_z", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("velocity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HEADING, new org.apache.thrift.meta_data.FieldMetaData("heading", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OMEGA, new org.apache.thrift.meta_data.FieldMetaData("omega", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCELERATION, new org.apache.thrift.meta_data.FieldMetaData("acceleration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHIELD_TIME, new org.apache.thrift.meta_data.FieldMetaData("shield_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VELOCITY_MEASUREMENT_COVARIANCE, new org.apache.thrift.meta_data.FieldMetaData("velocity_measurement_covariance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DynamicObstacle.class, metaDataMap);
  }

  public DynamicObstacle() {
  }

  public DynamicObstacle(
    short class_id,
    long id,
    double center_x,
    double center_y,
    double center_z,
    double width,
    double height,
    double length,
    double velocity,
    double heading,
    double omega,
    double acceleration,
    double shield_time,
    List<Double> velocity_measurement_covariance)
  {
    this();
    this.class_id = class_id;
    setClass_idIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.center_x = center_x;
    setCenter_xIsSet(true);
    this.center_y = center_y;
    setCenter_yIsSet(true);
    this.center_z = center_z;
    setCenter_zIsSet(true);
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.length = length;
    setLengthIsSet(true);
    this.velocity = velocity;
    setVelocityIsSet(true);
    this.heading = heading;
    setHeadingIsSet(true);
    this.omega = omega;
    setOmegaIsSet(true);
    this.acceleration = acceleration;
    setAccelerationIsSet(true);
    this.shield_time = shield_time;
    setShield_timeIsSet(true);
    this.velocity_measurement_covariance = velocity_measurement_covariance;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DynamicObstacle(DynamicObstacle other) {
    __isset_bitfield = other.__isset_bitfield;
    this.class_id = other.class_id;
    this.id = other.id;
    this.center_x = other.center_x;
    this.center_y = other.center_y;
    this.center_z = other.center_z;
    this.width = other.width;
    this.height = other.height;
    this.length = other.length;
    this.velocity = other.velocity;
    this.heading = other.heading;
    this.omega = other.omega;
    this.acceleration = other.acceleration;
    this.shield_time = other.shield_time;
    if (other.isSetVelocity_measurement_covariance()) {
      List<Double> __this__velocity_measurement_covariance = new ArrayList<Double>(other.velocity_measurement_covariance);
      this.velocity_measurement_covariance = __this__velocity_measurement_covariance;
    }
  }

  public DynamicObstacle deepCopy() {
    return new DynamicObstacle(this);
  }

  @Override
  public void clear() {
    setClass_idIsSet(false);
    this.class_id = 0;
    setIdIsSet(false);
    this.id = 0;
    setCenter_xIsSet(false);
    this.center_x = 0.0;
    setCenter_yIsSet(false);
    this.center_y = 0.0;
    setCenter_zIsSet(false);
    this.center_z = 0.0;
    setWidthIsSet(false);
    this.width = 0.0;
    setHeightIsSet(false);
    this.height = 0.0;
    setLengthIsSet(false);
    this.length = 0.0;
    setVelocityIsSet(false);
    this.velocity = 0.0;
    setHeadingIsSet(false);
    this.heading = 0.0;
    setOmegaIsSet(false);
    this.omega = 0.0;
    setAccelerationIsSet(false);
    this.acceleration = 0.0;
    setShield_timeIsSet(false);
    this.shield_time = 0.0;
    this.velocity_measurement_covariance = null;
  }

  public short getClass_id() {
    return this.class_id;
  }

  public DynamicObstacle setClass_id(short class_id) {
    this.class_id = class_id;
    setClass_idIsSet(true);
    return this;
  }

  public void unsetClass_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLASS_ID_ISSET_ID);
  }

  /** Returns true if field class_id is set (has been assigned a value) and false otherwise */
  public boolean isSetClass_id() {
    return EncodingUtils.testBit(__isset_bitfield, __CLASS_ID_ISSET_ID);
  }

  public void setClass_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLASS_ID_ISSET_ID, value);
  }

  public long getId() {
    return this.id;
  }

  public DynamicObstacle setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getCenter_x() {
    return this.center_x;
  }

  public DynamicObstacle setCenter_x(double center_x) {
    this.center_x = center_x;
    setCenter_xIsSet(true);
    return this;
  }

  public void unsetCenter_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTER_X_ISSET_ID);
  }

  /** Returns true if field center_x is set (has been assigned a value) and false otherwise */
  public boolean isSetCenter_x() {
    return EncodingUtils.testBit(__isset_bitfield, __CENTER_X_ISSET_ID);
  }

  public void setCenter_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTER_X_ISSET_ID, value);
  }

  public double getCenter_y() {
    return this.center_y;
  }

  public DynamicObstacle setCenter_y(double center_y) {
    this.center_y = center_y;
    setCenter_yIsSet(true);
    return this;
  }

  public void unsetCenter_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTER_Y_ISSET_ID);
  }

  /** Returns true if field center_y is set (has been assigned a value) and false otherwise */
  public boolean isSetCenter_y() {
    return EncodingUtils.testBit(__isset_bitfield, __CENTER_Y_ISSET_ID);
  }

  public void setCenter_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTER_Y_ISSET_ID, value);
  }

  public double getCenter_z() {
    return this.center_z;
  }

  public DynamicObstacle setCenter_z(double center_z) {
    this.center_z = center_z;
    setCenter_zIsSet(true);
    return this;
  }

  public void unsetCenter_z() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTER_Z_ISSET_ID);
  }

  /** Returns true if field center_z is set (has been assigned a value) and false otherwise */
  public boolean isSetCenter_z() {
    return EncodingUtils.testBit(__isset_bitfield, __CENTER_Z_ISSET_ID);
  }

  public void setCenter_zIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTER_Z_ISSET_ID, value);
  }

  public double getWidth() {
    return this.width;
  }

  public DynamicObstacle setWidth(double width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public double getHeight() {
    return this.height;
  }

  public DynamicObstacle setHeight(double height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public double getLength() {
    return this.length;
  }

  public DynamicObstacle setLength(double length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public double getVelocity() {
    return this.velocity;
  }

  public DynamicObstacle setVelocity(double velocity) {
    this.velocity = velocity;
    setVelocityIsSet(true);
    return this;
  }

  public void unsetVelocity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VELOCITY_ISSET_ID);
  }

  /** Returns true if field velocity is set (has been assigned a value) and false otherwise */
  public boolean isSetVelocity() {
    return EncodingUtils.testBit(__isset_bitfield, __VELOCITY_ISSET_ID);
  }

  public void setVelocityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VELOCITY_ISSET_ID, value);
  }

  public double getHeading() {
    return this.heading;
  }

  public DynamicObstacle setHeading(double heading) {
    this.heading = heading;
    setHeadingIsSet(true);
    return this;
  }

  public void unsetHeading() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEADING_ISSET_ID);
  }

  /** Returns true if field heading is set (has been assigned a value) and false otherwise */
  public boolean isSetHeading() {
    return EncodingUtils.testBit(__isset_bitfield, __HEADING_ISSET_ID);
  }

  public void setHeadingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEADING_ISSET_ID, value);
  }

  public double getOmega() {
    return this.omega;
  }

  public DynamicObstacle setOmega(double omega) {
    this.omega = omega;
    setOmegaIsSet(true);
    return this;
  }

  public void unsetOmega() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OMEGA_ISSET_ID);
  }

  /** Returns true if field omega is set (has been assigned a value) and false otherwise */
  public boolean isSetOmega() {
    return EncodingUtils.testBit(__isset_bitfield, __OMEGA_ISSET_ID);
  }

  public void setOmegaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OMEGA_ISSET_ID, value);
  }

  public double getAcceleration() {
    return this.acceleration;
  }

  public DynamicObstacle setAcceleration(double acceleration) {
    this.acceleration = acceleration;
    setAccelerationIsSet(true);
    return this;
  }

  public void unsetAcceleration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCELERATION_ISSET_ID);
  }

  /** Returns true if field acceleration is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceleration() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCELERATION_ISSET_ID);
  }

  public void setAccelerationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCELERATION_ISSET_ID, value);
  }

  public double getShield_time() {
    return this.shield_time;
  }

  public DynamicObstacle setShield_time(double shield_time) {
    this.shield_time = shield_time;
    setShield_timeIsSet(true);
    return this;
  }

  public void unsetShield_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHIELD_TIME_ISSET_ID);
  }

  /** Returns true if field shield_time is set (has been assigned a value) and false otherwise */
  public boolean isSetShield_time() {
    return EncodingUtils.testBit(__isset_bitfield, __SHIELD_TIME_ISSET_ID);
  }

  public void setShield_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHIELD_TIME_ISSET_ID, value);
  }

  public int getVelocity_measurement_covarianceSize() {
    return (this.velocity_measurement_covariance == null) ? 0 : this.velocity_measurement_covariance.size();
  }

  public java.util.Iterator<Double> getVelocity_measurement_covarianceIterator() {
    return (this.velocity_measurement_covariance == null) ? null : this.velocity_measurement_covariance.iterator();
  }

  public void addToVelocity_measurement_covariance(double elem) {
    if (this.velocity_measurement_covariance == null) {
      this.velocity_measurement_covariance = new ArrayList<Double>();
    }
    this.velocity_measurement_covariance.add(elem);
  }

  public List<Double> getVelocity_measurement_covariance() {
    return this.velocity_measurement_covariance;
  }

  public DynamicObstacle setVelocity_measurement_covariance(List<Double> velocity_measurement_covariance) {
    this.velocity_measurement_covariance = velocity_measurement_covariance;
    return this;
  }

  public void unsetVelocity_measurement_covariance() {
    this.velocity_measurement_covariance = null;
  }

  /** Returns true if field velocity_measurement_covariance is set (has been assigned a value) and false otherwise */
  public boolean isSetVelocity_measurement_covariance() {
    return this.velocity_measurement_covariance != null;
  }

  public void setVelocity_measurement_covarianceIsSet(boolean value) {
    if (!value) {
      this.velocity_measurement_covariance = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLASS_ID:
      if (value == null) {
        unsetClass_id();
      } else {
        setClass_id((Short)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CENTER_X:
      if (value == null) {
        unsetCenter_x();
      } else {
        setCenter_x((Double)value);
      }
      break;

    case CENTER_Y:
      if (value == null) {
        unsetCenter_y();
      } else {
        setCenter_y((Double)value);
      }
      break;

    case CENTER_Z:
      if (value == null) {
        unsetCenter_z();
      } else {
        setCenter_z((Double)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Double)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Double)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Double)value);
      }
      break;

    case VELOCITY:
      if (value == null) {
        unsetVelocity();
      } else {
        setVelocity((Double)value);
      }
      break;

    case HEADING:
      if (value == null) {
        unsetHeading();
      } else {
        setHeading((Double)value);
      }
      break;

    case OMEGA:
      if (value == null) {
        unsetOmega();
      } else {
        setOmega((Double)value);
      }
      break;

    case ACCELERATION:
      if (value == null) {
        unsetAcceleration();
      } else {
        setAcceleration((Double)value);
      }
      break;

    case SHIELD_TIME:
      if (value == null) {
        unsetShield_time();
      } else {
        setShield_time((Double)value);
      }
      break;

    case VELOCITY_MEASUREMENT_COVARIANCE:
      if (value == null) {
        unsetVelocity_measurement_covariance();
      } else {
        setVelocity_measurement_covariance((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLASS_ID:
      return getClass_id();

    case ID:
      return getId();

    case CENTER_X:
      return getCenter_x();

    case CENTER_Y:
      return getCenter_y();

    case CENTER_Z:
      return getCenter_z();

    case WIDTH:
      return getWidth();

    case HEIGHT:
      return getHeight();

    case LENGTH:
      return getLength();

    case VELOCITY:
      return getVelocity();

    case HEADING:
      return getHeading();

    case OMEGA:
      return getOmega();

    case ACCELERATION:
      return getAcceleration();

    case SHIELD_TIME:
      return getShield_time();

    case VELOCITY_MEASUREMENT_COVARIANCE:
      return getVelocity_measurement_covariance();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLASS_ID:
      return isSetClass_id();
    case ID:
      return isSetId();
    case CENTER_X:
      return isSetCenter_x();
    case CENTER_Y:
      return isSetCenter_y();
    case CENTER_Z:
      return isSetCenter_z();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case LENGTH:
      return isSetLength();
    case VELOCITY:
      return isSetVelocity();
    case HEADING:
      return isSetHeading();
    case OMEGA:
      return isSetOmega();
    case ACCELERATION:
      return isSetAcceleration();
    case SHIELD_TIME:
      return isSetShield_time();
    case VELOCITY_MEASUREMENT_COVARIANCE:
      return isSetVelocity_measurement_covariance();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DynamicObstacle)
      return this.equals((DynamicObstacle)that);
    return false;
  }

  public boolean equals(DynamicObstacle that) {
    if (that == null)
      return false;

    boolean this_present_class_id = true;
    boolean that_present_class_id = true;
    if (this_present_class_id || that_present_class_id) {
      if (!(this_present_class_id && that_present_class_id))
        return false;
      if (this.class_id != that.class_id)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_center_x = true;
    boolean that_present_center_x = true;
    if (this_present_center_x || that_present_center_x) {
      if (!(this_present_center_x && that_present_center_x))
        return false;
      if (this.center_x != that.center_x)
        return false;
    }

    boolean this_present_center_y = true;
    boolean that_present_center_y = true;
    if (this_present_center_y || that_present_center_y) {
      if (!(this_present_center_y && that_present_center_y))
        return false;
      if (this.center_y != that.center_y)
        return false;
    }

    boolean this_present_center_z = true;
    boolean that_present_center_z = true;
    if (this_present_center_z || that_present_center_z) {
      if (!(this_present_center_z && that_present_center_z))
        return false;
      if (this.center_z != that.center_z)
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_velocity = true;
    boolean that_present_velocity = true;
    if (this_present_velocity || that_present_velocity) {
      if (!(this_present_velocity && that_present_velocity))
        return false;
      if (this.velocity != that.velocity)
        return false;
    }

    boolean this_present_heading = true;
    boolean that_present_heading = true;
    if (this_present_heading || that_present_heading) {
      if (!(this_present_heading && that_present_heading))
        return false;
      if (this.heading != that.heading)
        return false;
    }

    boolean this_present_omega = true;
    boolean that_present_omega = true;
    if (this_present_omega || that_present_omega) {
      if (!(this_present_omega && that_present_omega))
        return false;
      if (this.omega != that.omega)
        return false;
    }

    boolean this_present_acceleration = true;
    boolean that_present_acceleration = true;
    if (this_present_acceleration || that_present_acceleration) {
      if (!(this_present_acceleration && that_present_acceleration))
        return false;
      if (this.acceleration != that.acceleration)
        return false;
    }

    boolean this_present_shield_time = true;
    boolean that_present_shield_time = true;
    if (this_present_shield_time || that_present_shield_time) {
      if (!(this_present_shield_time && that_present_shield_time))
        return false;
      if (this.shield_time != that.shield_time)
        return false;
    }

    boolean this_present_velocity_measurement_covariance = true && this.isSetVelocity_measurement_covariance();
    boolean that_present_velocity_measurement_covariance = true && that.isSetVelocity_measurement_covariance();
    if (this_present_velocity_measurement_covariance || that_present_velocity_measurement_covariance) {
      if (!(this_present_velocity_measurement_covariance && that_present_velocity_measurement_covariance))
        return false;
      if (!this.velocity_measurement_covariance.equals(that.velocity_measurement_covariance))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_class_id = true;
    list.add(present_class_id);
    if (present_class_id)
      list.add(class_id);

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_center_x = true;
    list.add(present_center_x);
    if (present_center_x)
      list.add(center_x);

    boolean present_center_y = true;
    list.add(present_center_y);
    if (present_center_y)
      list.add(center_y);

    boolean present_center_z = true;
    list.add(present_center_z);
    if (present_center_z)
      list.add(center_z);

    boolean present_width = true;
    list.add(present_width);
    if (present_width)
      list.add(width);

    boolean present_height = true;
    list.add(present_height);
    if (present_height)
      list.add(height);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    boolean present_velocity = true;
    list.add(present_velocity);
    if (present_velocity)
      list.add(velocity);

    boolean present_heading = true;
    list.add(present_heading);
    if (present_heading)
      list.add(heading);

    boolean present_omega = true;
    list.add(present_omega);
    if (present_omega)
      list.add(omega);

    boolean present_acceleration = true;
    list.add(present_acceleration);
    if (present_acceleration)
      list.add(acceleration);

    boolean present_shield_time = true;
    list.add(present_shield_time);
    if (present_shield_time)
      list.add(shield_time);

    boolean present_velocity_measurement_covariance = true && (isSetVelocity_measurement_covariance());
    list.add(present_velocity_measurement_covariance);
    if (present_velocity_measurement_covariance)
      list.add(velocity_measurement_covariance);

    return list.hashCode();
  }

  @Override
  public int compareTo(DynamicObstacle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClass_id()).compareTo(other.isSetClass_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClass_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.class_id, other.class_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCenter_x()).compareTo(other.isSetCenter_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenter_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.center_x, other.center_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCenter_y()).compareTo(other.isSetCenter_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenter_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.center_y, other.center_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCenter_z()).compareTo(other.isSetCenter_z());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenter_z()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.center_z, other.center_z);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVelocity()).compareTo(other.isSetVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.velocity, other.velocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeading()).compareTo(other.isSetHeading());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeading()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heading, other.heading);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOmega()).compareTo(other.isSetOmega());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOmega()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.omega, other.omega);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcceleration()).compareTo(other.isSetAcceleration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceleration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceleration, other.acceleration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShield_time()).compareTo(other.isSetShield_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShield_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shield_time, other.shield_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVelocity_measurement_covariance()).compareTo(other.isSetVelocity_measurement_covariance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVelocity_measurement_covariance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.velocity_measurement_covariance, other.velocity_measurement_covariance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DynamicObstacle(");
    boolean first = true;

    sb.append("class_id:");
    sb.append(this.class_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("center_x:");
    sb.append(this.center_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("center_y:");
    sb.append(this.center_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("center_z:");
    sb.append(this.center_z);
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("velocity:");
    sb.append(this.velocity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heading:");
    sb.append(this.heading);
    first = false;
    if (!first) sb.append(", ");
    sb.append("omega:");
    sb.append(this.omega);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acceleration:");
    sb.append(this.acceleration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shield_time:");
    sb.append(this.shield_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("velocity_measurement_covariance:");
    if (this.velocity_measurement_covariance == null) {
      sb.append("null");
    } else {
      sb.append(this.velocity_measurement_covariance);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DynamicObstacleStandardSchemeFactory implements SchemeFactory {
    public DynamicObstacleStandardScheme getScheme() {
      return new DynamicObstacleStandardScheme();
    }
  }

  private static class DynamicObstacleStandardScheme extends StandardScheme<DynamicObstacle> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DynamicObstacle struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLASS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.class_id = iprot.readI16();
              struct.setClass_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CENTER_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.center_x = iprot.readDouble();
              struct.setCenter_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CENTER_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.center_y = iprot.readDouble();
              struct.setCenter_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CENTER_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.center_z = iprot.readDouble();
              struct.setCenter_zIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.width = iprot.readDouble();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.height = iprot.readDouble();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.length = iprot.readDouble();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.velocity = iprot.readDouble();
              struct.setVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HEADING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.heading = iprot.readDouble();
              struct.setHeadingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OMEGA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.omega = iprot.readDouble();
              struct.setOmegaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACCELERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.acceleration = iprot.readDouble();
              struct.setAccelerationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHIELD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shield_time = iprot.readDouble();
              struct.setShield_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VELOCITY_MEASUREMENT_COVARIANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.velocity_measurement_covariance = new ArrayList<Double>(_list24.size);
                double _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readDouble();
                  struct.velocity_measurement_covariance.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setVelocity_measurement_covarianceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DynamicObstacle struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
      oprot.writeI16(struct.class_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CENTER_X_FIELD_DESC);
      oprot.writeDouble(struct.center_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CENTER_Y_FIELD_DESC);
      oprot.writeDouble(struct.center_y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CENTER_Z_FIELD_DESC);
      oprot.writeDouble(struct.center_z);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeDouble(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeDouble(struct.height);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeDouble(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VELOCITY_FIELD_DESC);
      oprot.writeDouble(struct.velocity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEADING_FIELD_DESC);
      oprot.writeDouble(struct.heading);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OMEGA_FIELD_DESC);
      oprot.writeDouble(struct.omega);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCELERATION_FIELD_DESC);
      oprot.writeDouble(struct.acceleration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHIELD_TIME_FIELD_DESC);
      oprot.writeDouble(struct.shield_time);
      oprot.writeFieldEnd();
      if (struct.velocity_measurement_covariance != null) {
        oprot.writeFieldBegin(VELOCITY_MEASUREMENT_COVARIANCE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.velocity_measurement_covariance.size()));
          for (double _iter27 : struct.velocity_measurement_covariance)
          {
            oprot.writeDouble(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DynamicObstacleTupleSchemeFactory implements SchemeFactory {
    public DynamicObstacleTupleScheme getScheme() {
      return new DynamicObstacleTupleScheme();
    }
  }

  private static class DynamicObstacleTupleScheme extends TupleScheme<DynamicObstacle> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DynamicObstacle struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClass_id()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetCenter_x()) {
        optionals.set(2);
      }
      if (struct.isSetCenter_y()) {
        optionals.set(3);
      }
      if (struct.isSetCenter_z()) {
        optionals.set(4);
      }
      if (struct.isSetWidth()) {
        optionals.set(5);
      }
      if (struct.isSetHeight()) {
        optionals.set(6);
      }
      if (struct.isSetLength()) {
        optionals.set(7);
      }
      if (struct.isSetVelocity()) {
        optionals.set(8);
      }
      if (struct.isSetHeading()) {
        optionals.set(9);
      }
      if (struct.isSetOmega()) {
        optionals.set(10);
      }
      if (struct.isSetAcceleration()) {
        optionals.set(11);
      }
      if (struct.isSetShield_time()) {
        optionals.set(12);
      }
      if (struct.isSetVelocity_measurement_covariance()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetClass_id()) {
        oprot.writeI16(struct.class_id);
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCenter_x()) {
        oprot.writeDouble(struct.center_x);
      }
      if (struct.isSetCenter_y()) {
        oprot.writeDouble(struct.center_y);
      }
      if (struct.isSetCenter_z()) {
        oprot.writeDouble(struct.center_z);
      }
      if (struct.isSetWidth()) {
        oprot.writeDouble(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeDouble(struct.height);
      }
      if (struct.isSetLength()) {
        oprot.writeDouble(struct.length);
      }
      if (struct.isSetVelocity()) {
        oprot.writeDouble(struct.velocity);
      }
      if (struct.isSetHeading()) {
        oprot.writeDouble(struct.heading);
      }
      if (struct.isSetOmega()) {
        oprot.writeDouble(struct.omega);
      }
      if (struct.isSetAcceleration()) {
        oprot.writeDouble(struct.acceleration);
      }
      if (struct.isSetShield_time()) {
        oprot.writeDouble(struct.shield_time);
      }
      if (struct.isSetVelocity_measurement_covariance()) {
        {
          oprot.writeI32(struct.velocity_measurement_covariance.size());
          for (double _iter28 : struct.velocity_measurement_covariance)
          {
            oprot.writeDouble(_iter28);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DynamicObstacle struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.class_id = iprot.readI16();
        struct.setClass_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.center_x = iprot.readDouble();
        struct.setCenter_xIsSet(true);
      }
      if (incoming.get(3)) {
        struct.center_y = iprot.readDouble();
        struct.setCenter_yIsSet(true);
      }
      if (incoming.get(4)) {
        struct.center_z = iprot.readDouble();
        struct.setCenter_zIsSet(true);
      }
      if (incoming.get(5)) {
        struct.width = iprot.readDouble();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.height = iprot.readDouble();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(7)) {
        struct.length = iprot.readDouble();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(8)) {
        struct.velocity = iprot.readDouble();
        struct.setVelocityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.heading = iprot.readDouble();
        struct.setHeadingIsSet(true);
      }
      if (incoming.get(10)) {
        struct.omega = iprot.readDouble();
        struct.setOmegaIsSet(true);
      }
      if (incoming.get(11)) {
        struct.acceleration = iprot.readDouble();
        struct.setAccelerationIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shield_time = iprot.readDouble();
        struct.setShield_timeIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.velocity_measurement_covariance = new ArrayList<Double>(_list29.size);
          double _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readDouble();
            struct.velocity_measurement_covariance.add(_elem30);
          }
        }
        struct.setVelocity_measurement_covarianceIsSet(true);
      }
    }
  }

}

