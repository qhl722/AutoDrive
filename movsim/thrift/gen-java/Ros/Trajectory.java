/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Ros;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-26")
public class Trajectory implements org.apache.thrift.TBase<Trajectory, Trajectory._Fields>, java.io.Serializable, Cloneable, Comparable<Trajectory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Trajectory");

  private static final org.apache.thrift.protocol.TField INITIAL_POSE_FIELD_DESC = new org.apache.thrift.protocol.TField("initial_pose", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField POSES_FIELD_DESC = new org.apache.thrift.protocol.TField("poses", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DRIVING_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("driving_direction", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField DRIVING_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("driving_state", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TrajectoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TrajectoryTupleSchemeFactory());
  }

  public Pose initial_pose; // required
  public List<Pose> poses; // required
  public short driving_direction; // required
  public short driving_state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INITIAL_POSE((short)1, "initial_pose"),
    POSES((short)2, "poses"),
    DRIVING_DIRECTION((short)3, "driving_direction"),
    DRIVING_STATE((short)4, "driving_state");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INITIAL_POSE
          return INITIAL_POSE;
        case 2: // POSES
          return POSES;
        case 3: // DRIVING_DIRECTION
          return DRIVING_DIRECTION;
        case 4: // DRIVING_STATE
          return DRIVING_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DRIVING_DIRECTION_ISSET_ID = 0;
  private static final int __DRIVING_STATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INITIAL_POSE, new org.apache.thrift.meta_data.FieldMetaData("initial_pose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pose.class)));
    tmpMap.put(_Fields.POSES, new org.apache.thrift.meta_data.FieldMetaData("poses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pose.class))));
    tmpMap.put(_Fields.DRIVING_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("driving_direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DRIVING_STATE, new org.apache.thrift.meta_data.FieldMetaData("driving_state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Trajectory.class, metaDataMap);
  }

  public Trajectory() {
  }

  public Trajectory(
    Pose initial_pose,
    List<Pose> poses,
    short driving_direction,
    short driving_state)
  {
    this();
    this.initial_pose = initial_pose;
    this.poses = poses;
    this.driving_direction = driving_direction;
    setDriving_directionIsSet(true);
    this.driving_state = driving_state;
    setDriving_stateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Trajectory(Trajectory other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInitial_pose()) {
      this.initial_pose = new Pose(other.initial_pose);
    }
    if (other.isSetPoses()) {
      List<Pose> __this__poses = new ArrayList<Pose>(other.poses.size());
      for (Pose other_element : other.poses) {
        __this__poses.add(new Pose(other_element));
      }
      this.poses = __this__poses;
    }
    this.driving_direction = other.driving_direction;
    this.driving_state = other.driving_state;
  }

  public Trajectory deepCopy() {
    return new Trajectory(this);
  }

  @Override
  public void clear() {
    this.initial_pose = null;
    this.poses = null;
    setDriving_directionIsSet(false);
    this.driving_direction = 0;
    setDriving_stateIsSet(false);
    this.driving_state = 0;
  }

  public Pose getInitial_pose() {
    return this.initial_pose;
  }

  public Trajectory setInitial_pose(Pose initial_pose) {
    this.initial_pose = initial_pose;
    return this;
  }

  public void unsetInitial_pose() {
    this.initial_pose = null;
  }

  /** Returns true if field initial_pose is set (has been assigned a value) and false otherwise */
  public boolean isSetInitial_pose() {
    return this.initial_pose != null;
  }

  public void setInitial_poseIsSet(boolean value) {
    if (!value) {
      this.initial_pose = null;
    }
  }

  public int getPosesSize() {
    return (this.poses == null) ? 0 : this.poses.size();
  }

  public java.util.Iterator<Pose> getPosesIterator() {
    return (this.poses == null) ? null : this.poses.iterator();
  }

  public void addToPoses(Pose elem) {
    if (this.poses == null) {
      this.poses = new ArrayList<Pose>();
    }
    this.poses.add(elem);
  }

  public List<Pose> getPoses() {
    return this.poses;
  }

  public Trajectory setPoses(List<Pose> poses) {
    this.poses = poses;
    return this;
  }

  public void unsetPoses() {
    this.poses = null;
  }

  /** Returns true if field poses is set (has been assigned a value) and false otherwise */
  public boolean isSetPoses() {
    return this.poses != null;
  }

  public void setPosesIsSet(boolean value) {
    if (!value) {
      this.poses = null;
    }
  }

  public short getDriving_direction() {
    return this.driving_direction;
  }

  public Trajectory setDriving_direction(short driving_direction) {
    this.driving_direction = driving_direction;
    setDriving_directionIsSet(true);
    return this;
  }

  public void unsetDriving_direction() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DRIVING_DIRECTION_ISSET_ID);
  }

  /** Returns true if field driving_direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDriving_direction() {
    return EncodingUtils.testBit(__isset_bitfield, __DRIVING_DIRECTION_ISSET_ID);
  }

  public void setDriving_directionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DRIVING_DIRECTION_ISSET_ID, value);
  }

  public short getDriving_state() {
    return this.driving_state;
  }

  public Trajectory setDriving_state(short driving_state) {
    this.driving_state = driving_state;
    setDriving_stateIsSet(true);
    return this;
  }

  public void unsetDriving_state() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DRIVING_STATE_ISSET_ID);
  }

  /** Returns true if field driving_state is set (has been assigned a value) and false otherwise */
  public boolean isSetDriving_state() {
    return EncodingUtils.testBit(__isset_bitfield, __DRIVING_STATE_ISSET_ID);
  }

  public void setDriving_stateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DRIVING_STATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INITIAL_POSE:
      if (value == null) {
        unsetInitial_pose();
      } else {
        setInitial_pose((Pose)value);
      }
      break;

    case POSES:
      if (value == null) {
        unsetPoses();
      } else {
        setPoses((List<Pose>)value);
      }
      break;

    case DRIVING_DIRECTION:
      if (value == null) {
        unsetDriving_direction();
      } else {
        setDriving_direction((Short)value);
      }
      break;

    case DRIVING_STATE:
      if (value == null) {
        unsetDriving_state();
      } else {
        setDriving_state((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INITIAL_POSE:
      return getInitial_pose();

    case POSES:
      return getPoses();

    case DRIVING_DIRECTION:
      return getDriving_direction();

    case DRIVING_STATE:
      return getDriving_state();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INITIAL_POSE:
      return isSetInitial_pose();
    case POSES:
      return isSetPoses();
    case DRIVING_DIRECTION:
      return isSetDriving_direction();
    case DRIVING_STATE:
      return isSetDriving_state();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Trajectory)
      return this.equals((Trajectory)that);
    return false;
  }

  public boolean equals(Trajectory that) {
    if (that == null)
      return false;

    boolean this_present_initial_pose = true && this.isSetInitial_pose();
    boolean that_present_initial_pose = true && that.isSetInitial_pose();
    if (this_present_initial_pose || that_present_initial_pose) {
      if (!(this_present_initial_pose && that_present_initial_pose))
        return false;
      if (!this.initial_pose.equals(that.initial_pose))
        return false;
    }

    boolean this_present_poses = true && this.isSetPoses();
    boolean that_present_poses = true && that.isSetPoses();
    if (this_present_poses || that_present_poses) {
      if (!(this_present_poses && that_present_poses))
        return false;
      if (!this.poses.equals(that.poses))
        return false;
    }

    boolean this_present_driving_direction = true;
    boolean that_present_driving_direction = true;
    if (this_present_driving_direction || that_present_driving_direction) {
      if (!(this_present_driving_direction && that_present_driving_direction))
        return false;
      if (this.driving_direction != that.driving_direction)
        return false;
    }

    boolean this_present_driving_state = true;
    boolean that_present_driving_state = true;
    if (this_present_driving_state || that_present_driving_state) {
      if (!(this_present_driving_state && that_present_driving_state))
        return false;
      if (this.driving_state != that.driving_state)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_initial_pose = true && (isSetInitial_pose());
    list.add(present_initial_pose);
    if (present_initial_pose)
      list.add(initial_pose);

    boolean present_poses = true && (isSetPoses());
    list.add(present_poses);
    if (present_poses)
      list.add(poses);

    boolean present_driving_direction = true;
    list.add(present_driving_direction);
    if (present_driving_direction)
      list.add(driving_direction);

    boolean present_driving_state = true;
    list.add(present_driving_state);
    if (present_driving_state)
      list.add(driving_state);

    return list.hashCode();
  }

  @Override
  public int compareTo(Trajectory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInitial_pose()).compareTo(other.isSetInitial_pose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitial_pose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initial_pose, other.initial_pose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoses()).compareTo(other.isSetPoses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poses, other.poses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriving_direction()).compareTo(other.isSetDriving_direction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriving_direction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driving_direction, other.driving_direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriving_state()).compareTo(other.isSetDriving_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriving_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driving_state, other.driving_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Trajectory(");
    boolean first = true;

    sb.append("initial_pose:");
    if (this.initial_pose == null) {
      sb.append("null");
    } else {
      sb.append(this.initial_pose);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("poses:");
    if (this.poses == null) {
      sb.append("null");
    } else {
      sb.append(this.poses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driving_direction:");
    sb.append(this.driving_direction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("driving_state:");
    sb.append(this.driving_state);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (initial_pose != null) {
      initial_pose.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TrajectoryStandardSchemeFactory implements SchemeFactory {
    public TrajectoryStandardScheme getScheme() {
      return new TrajectoryStandardScheme();
    }
  }

  private static class TrajectoryStandardScheme extends StandardScheme<Trajectory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Trajectory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INITIAL_POSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.initial_pose = new Pose();
              struct.initial_pose.read(iprot);
              struct.setInitial_poseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.poses = new ArrayList<Pose>(_list40.size);
                Pose _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new Pose();
                  _elem41.read(iprot);
                  struct.poses.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setPosesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DRIVING_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.driving_direction = iprot.readI16();
              struct.setDriving_directionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DRIVING_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.driving_state = iprot.readI16();
              struct.setDriving_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Trajectory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.initial_pose != null) {
        oprot.writeFieldBegin(INITIAL_POSE_FIELD_DESC);
        struct.initial_pose.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.poses != null) {
        oprot.writeFieldBegin(POSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.poses.size()));
          for (Pose _iter43 : struct.poses)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DRIVING_DIRECTION_FIELD_DESC);
      oprot.writeI16(struct.driving_direction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DRIVING_STATE_FIELD_DESC);
      oprot.writeI16(struct.driving_state);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TrajectoryTupleSchemeFactory implements SchemeFactory {
    public TrajectoryTupleScheme getScheme() {
      return new TrajectoryTupleScheme();
    }
  }

  private static class TrajectoryTupleScheme extends TupleScheme<Trajectory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Trajectory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInitial_pose()) {
        optionals.set(0);
      }
      if (struct.isSetPoses()) {
        optionals.set(1);
      }
      if (struct.isSetDriving_direction()) {
        optionals.set(2);
      }
      if (struct.isSetDriving_state()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetInitial_pose()) {
        struct.initial_pose.write(oprot);
      }
      if (struct.isSetPoses()) {
        {
          oprot.writeI32(struct.poses.size());
          for (Pose _iter44 : struct.poses)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetDriving_direction()) {
        oprot.writeI16(struct.driving_direction);
      }
      if (struct.isSetDriving_state()) {
        oprot.writeI16(struct.driving_state);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Trajectory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.initial_pose = new Pose();
        struct.initial_pose.read(iprot);
        struct.setInitial_poseIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.poses = new ArrayList<Pose>(_list45.size);
          Pose _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new Pose();
            _elem46.read(iprot);
            struct.poses.add(_elem46);
          }
        }
        struct.setPosesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.driving_direction = iprot.readI16();
        struct.setDriving_directionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.driving_state = iprot.readI16();
        struct.setDriving_stateIsSet(true);
      }
    }
  }

}

