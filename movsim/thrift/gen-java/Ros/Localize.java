/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Ros;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-26")
public class Localize implements org.apache.thrift.TBase<Localize, Localize._Fields>, java.io.Serializable, Cloneable, Comparable<Localize> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Localize");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RAW_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("raw_data", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField M_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mTime", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ALTITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("altitude", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField VEL_X_FIELD_DESC = new org.apache.thrift.protocol.TField("vel_x", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField VEL_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("vel_y", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField VEL_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("vel_z", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ACC_X_FIELD_DESC = new org.apache.thrift.protocol.TField("acc_x", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField ACC_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("acc_y", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ACC_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("acc_z", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField NAV_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nav_mode", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField POS_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("pos_mode", org.apache.thrift.protocol.TType.I16, (short)14);
  private static final org.apache.thrift.protocol.TField VEL_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("vel_mode", org.apache.thrift.protocol.TType.I16, (short)15);
  private static final org.apache.thrift.protocol.TField ATT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("att_mode", org.apache.thrift.protocol.TType.I16, (short)16);
  private static final org.apache.thrift.protocol.TField ANGULAR_VEL_X_FIELD_DESC = new org.apache.thrift.protocol.TField("angular_vel_x", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField ANGULAR_VEL_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("angular_vel_y", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField ANGULAR_VEL_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("angular_vel_z", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField HEADING_FIELD_DESC = new org.apache.thrift.protocol.TField("heading", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("pitch", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField ROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("roll", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField POSE_X_FIELD_DESC = new org.apache.thrift.protocol.TField("pose_x", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField POSE_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("pose_y", org.apache.thrift.protocol.TType.DOUBLE, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LocalizeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LocalizeTupleSchemeFactory());
  }

  public long timestamp; // required
  public String raw_data; // required
  public double mTime; // required
  public double latitude; // required
  public double longitude; // required
  public double altitude; // required
  public double vel_x; // required
  public double vel_y; // required
  public double vel_z; // required
  public double acc_x; // required
  public double acc_y; // required
  public double acc_z; // required
  public short nav_mode; // required
  public short pos_mode; // required
  public short vel_mode; // required
  public short att_mode; // required
  public double angular_vel_x; // required
  public double angular_vel_y; // required
  public double angular_vel_z; // required
  public double heading; // required
  public double pitch; // required
  public double roll; // required
  public double pose_x; // required
  public double pose_y; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    RAW_DATA((short)2, "raw_data"),
    M_TIME((short)3, "mTime"),
    LATITUDE((short)4, "latitude"),
    LONGITUDE((short)5, "longitude"),
    ALTITUDE((short)6, "altitude"),
    VEL_X((short)7, "vel_x"),
    VEL_Y((short)8, "vel_y"),
    VEL_Z((short)9, "vel_z"),
    ACC_X((short)10, "acc_x"),
    ACC_Y((short)11, "acc_y"),
    ACC_Z((short)12, "acc_z"),
    NAV_MODE((short)13, "nav_mode"),
    POS_MODE((short)14, "pos_mode"),
    VEL_MODE((short)15, "vel_mode"),
    ATT_MODE((short)16, "att_mode"),
    ANGULAR_VEL_X((short)17, "angular_vel_x"),
    ANGULAR_VEL_Y((short)18, "angular_vel_y"),
    ANGULAR_VEL_Z((short)19, "angular_vel_z"),
    HEADING((short)20, "heading"),
    PITCH((short)21, "pitch"),
    ROLL((short)22, "roll"),
    POSE_X((short)23, "pose_x"),
    POSE_Y((short)24, "pose_y");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // RAW_DATA
          return RAW_DATA;
        case 3: // M_TIME
          return M_TIME;
        case 4: // LATITUDE
          return LATITUDE;
        case 5: // LONGITUDE
          return LONGITUDE;
        case 6: // ALTITUDE
          return ALTITUDE;
        case 7: // VEL_X
          return VEL_X;
        case 8: // VEL_Y
          return VEL_Y;
        case 9: // VEL_Z
          return VEL_Z;
        case 10: // ACC_X
          return ACC_X;
        case 11: // ACC_Y
          return ACC_Y;
        case 12: // ACC_Z
          return ACC_Z;
        case 13: // NAV_MODE
          return NAV_MODE;
        case 14: // POS_MODE
          return POS_MODE;
        case 15: // VEL_MODE
          return VEL_MODE;
        case 16: // ATT_MODE
          return ATT_MODE;
        case 17: // ANGULAR_VEL_X
          return ANGULAR_VEL_X;
        case 18: // ANGULAR_VEL_Y
          return ANGULAR_VEL_Y;
        case 19: // ANGULAR_VEL_Z
          return ANGULAR_VEL_Z;
        case 20: // HEADING
          return HEADING;
        case 21: // PITCH
          return PITCH;
        case 22: // ROLL
          return ROLL;
        case 23: // POSE_X
          return POSE_X;
        case 24: // POSE_Y
          return POSE_Y;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __MTIME_ISSET_ID = 1;
  private static final int __LATITUDE_ISSET_ID = 2;
  private static final int __LONGITUDE_ISSET_ID = 3;
  private static final int __ALTITUDE_ISSET_ID = 4;
  private static final int __VEL_X_ISSET_ID = 5;
  private static final int __VEL_Y_ISSET_ID = 6;
  private static final int __VEL_Z_ISSET_ID = 7;
  private static final int __ACC_X_ISSET_ID = 8;
  private static final int __ACC_Y_ISSET_ID = 9;
  private static final int __ACC_Z_ISSET_ID = 10;
  private static final int __NAV_MODE_ISSET_ID = 11;
  private static final int __POS_MODE_ISSET_ID = 12;
  private static final int __VEL_MODE_ISSET_ID = 13;
  private static final int __ATT_MODE_ISSET_ID = 14;
  private static final int __ANGULAR_VEL_X_ISSET_ID = 15;
  private static final int __ANGULAR_VEL_Y_ISSET_ID = 16;
  private static final int __ANGULAR_VEL_Z_ISSET_ID = 17;
  private static final int __HEADING_ISSET_ID = 18;
  private static final int __PITCH_ISSET_ID = 19;
  private static final int __ROLL_ISSET_ID = 20;
  private static final int __POSE_X_ISSET_ID = 21;
  private static final int __POSE_Y_ISSET_ID = 22;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RAW_DATA, new org.apache.thrift.meta_data.FieldMetaData("raw_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_TIME, new org.apache.thrift.meta_data.FieldMetaData("mTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALTITUDE, new org.apache.thrift.meta_data.FieldMetaData("altitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VEL_X, new org.apache.thrift.meta_data.FieldMetaData("vel_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VEL_Y, new org.apache.thrift.meta_data.FieldMetaData("vel_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VEL_Z, new org.apache.thrift.meta_data.FieldMetaData("vel_z", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACC_X, new org.apache.thrift.meta_data.FieldMetaData("acc_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACC_Y, new org.apache.thrift.meta_data.FieldMetaData("acc_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACC_Z, new org.apache.thrift.meta_data.FieldMetaData("acc_z", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NAV_MODE, new org.apache.thrift.meta_data.FieldMetaData("nav_mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.POS_MODE, new org.apache.thrift.meta_data.FieldMetaData("pos_mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VEL_MODE, new org.apache.thrift.meta_data.FieldMetaData("vel_mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ATT_MODE, new org.apache.thrift.meta_data.FieldMetaData("att_mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ANGULAR_VEL_X, new org.apache.thrift.meta_data.FieldMetaData("angular_vel_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANGULAR_VEL_Y, new org.apache.thrift.meta_data.FieldMetaData("angular_vel_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANGULAR_VEL_Z, new org.apache.thrift.meta_data.FieldMetaData("angular_vel_z", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HEADING, new org.apache.thrift.meta_data.FieldMetaData("heading", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PITCH, new org.apache.thrift.meta_data.FieldMetaData("pitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ROLL, new org.apache.thrift.meta_data.FieldMetaData("roll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSE_X, new org.apache.thrift.meta_data.FieldMetaData("pose_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSE_Y, new org.apache.thrift.meta_data.FieldMetaData("pose_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Localize.class, metaDataMap);
  }

  public Localize() {
  }

  public Localize(
    long timestamp,
    String raw_data,
    double mTime,
    double latitude,
    double longitude,
    double altitude,
    double vel_x,
    double vel_y,
    double vel_z,
    double acc_x,
    double acc_y,
    double acc_z,
    short nav_mode,
    short pos_mode,
    short vel_mode,
    short att_mode,
    double angular_vel_x,
    double angular_vel_y,
    double angular_vel_z,
    double heading,
    double pitch,
    double roll,
    double pose_x,
    double pose_y)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.raw_data = raw_data;
    this.mTime = mTime;
    setMTimeIsSet(true);
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.longitude = longitude;
    setLongitudeIsSet(true);
    this.altitude = altitude;
    setAltitudeIsSet(true);
    this.vel_x = vel_x;
    setVel_xIsSet(true);
    this.vel_y = vel_y;
    setVel_yIsSet(true);
    this.vel_z = vel_z;
    setVel_zIsSet(true);
    this.acc_x = acc_x;
    setAcc_xIsSet(true);
    this.acc_y = acc_y;
    setAcc_yIsSet(true);
    this.acc_z = acc_z;
    setAcc_zIsSet(true);
    this.nav_mode = nav_mode;
    setNav_modeIsSet(true);
    this.pos_mode = pos_mode;
    setPos_modeIsSet(true);
    this.vel_mode = vel_mode;
    setVel_modeIsSet(true);
    this.att_mode = att_mode;
    setAtt_modeIsSet(true);
    this.angular_vel_x = angular_vel_x;
    setAngular_vel_xIsSet(true);
    this.angular_vel_y = angular_vel_y;
    setAngular_vel_yIsSet(true);
    this.angular_vel_z = angular_vel_z;
    setAngular_vel_zIsSet(true);
    this.heading = heading;
    setHeadingIsSet(true);
    this.pitch = pitch;
    setPitchIsSet(true);
    this.roll = roll;
    setRollIsSet(true);
    this.pose_x = pose_x;
    setPose_xIsSet(true);
    this.pose_y = pose_y;
    setPose_yIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Localize(Localize other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetRaw_data()) {
      this.raw_data = other.raw_data;
    }
    this.mTime = other.mTime;
    this.latitude = other.latitude;
    this.longitude = other.longitude;
    this.altitude = other.altitude;
    this.vel_x = other.vel_x;
    this.vel_y = other.vel_y;
    this.vel_z = other.vel_z;
    this.acc_x = other.acc_x;
    this.acc_y = other.acc_y;
    this.acc_z = other.acc_z;
    this.nav_mode = other.nav_mode;
    this.pos_mode = other.pos_mode;
    this.vel_mode = other.vel_mode;
    this.att_mode = other.att_mode;
    this.angular_vel_x = other.angular_vel_x;
    this.angular_vel_y = other.angular_vel_y;
    this.angular_vel_z = other.angular_vel_z;
    this.heading = other.heading;
    this.pitch = other.pitch;
    this.roll = other.roll;
    this.pose_x = other.pose_x;
    this.pose_y = other.pose_y;
  }

  public Localize deepCopy() {
    return new Localize(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.raw_data = null;
    setMTimeIsSet(false);
    this.mTime = 0.0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setAltitudeIsSet(false);
    this.altitude = 0.0;
    setVel_xIsSet(false);
    this.vel_x = 0.0;
    setVel_yIsSet(false);
    this.vel_y = 0.0;
    setVel_zIsSet(false);
    this.vel_z = 0.0;
    setAcc_xIsSet(false);
    this.acc_x = 0.0;
    setAcc_yIsSet(false);
    this.acc_y = 0.0;
    setAcc_zIsSet(false);
    this.acc_z = 0.0;
    setNav_modeIsSet(false);
    this.nav_mode = 0;
    setPos_modeIsSet(false);
    this.pos_mode = 0;
    setVel_modeIsSet(false);
    this.vel_mode = 0;
    setAtt_modeIsSet(false);
    this.att_mode = 0;
    setAngular_vel_xIsSet(false);
    this.angular_vel_x = 0.0;
    setAngular_vel_yIsSet(false);
    this.angular_vel_y = 0.0;
    setAngular_vel_zIsSet(false);
    this.angular_vel_z = 0.0;
    setHeadingIsSet(false);
    this.heading = 0.0;
    setPitchIsSet(false);
    this.pitch = 0.0;
    setRollIsSet(false);
    this.roll = 0.0;
    setPose_xIsSet(false);
    this.pose_x = 0.0;
    setPose_yIsSet(false);
    this.pose_y = 0.0;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Localize setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getRaw_data() {
    return this.raw_data;
  }

  public Localize setRaw_data(String raw_data) {
    this.raw_data = raw_data;
    return this;
  }

  public void unsetRaw_data() {
    this.raw_data = null;
  }

  /** Returns true if field raw_data is set (has been assigned a value) and false otherwise */
  public boolean isSetRaw_data() {
    return this.raw_data != null;
  }

  public void setRaw_dataIsSet(boolean value) {
    if (!value) {
      this.raw_data = null;
    }
  }

  public double getMTime() {
    return this.mTime;
  }

  public Localize setMTime(double mTime) {
    this.mTime = mTime;
    setMTimeIsSet(true);
    return this;
  }

  public void unsetMTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MTIME_ISSET_ID);
  }

  /** Returns true if field mTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MTIME_ISSET_ID);
  }

  public void setMTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MTIME_ISSET_ID, value);
  }

  public double getLatitude() {
    return this.latitude;
  }

  public Localize setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public Localize setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public double getAltitude() {
    return this.altitude;
  }

  public Localize setAltitude(double altitude) {
    this.altitude = altitude;
    setAltitudeIsSet(true);
    return this;
  }

  public void unsetAltitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALTITUDE_ISSET_ID);
  }

  /** Returns true if field altitude is set (has been assigned a value) and false otherwise */
  public boolean isSetAltitude() {
    return EncodingUtils.testBit(__isset_bitfield, __ALTITUDE_ISSET_ID);
  }

  public void setAltitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALTITUDE_ISSET_ID, value);
  }

  public double getVel_x() {
    return this.vel_x;
  }

  public Localize setVel_x(double vel_x) {
    this.vel_x = vel_x;
    setVel_xIsSet(true);
    return this;
  }

  public void unsetVel_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEL_X_ISSET_ID);
  }

  /** Returns true if field vel_x is set (has been assigned a value) and false otherwise */
  public boolean isSetVel_x() {
    return EncodingUtils.testBit(__isset_bitfield, __VEL_X_ISSET_ID);
  }

  public void setVel_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEL_X_ISSET_ID, value);
  }

  public double getVel_y() {
    return this.vel_y;
  }

  public Localize setVel_y(double vel_y) {
    this.vel_y = vel_y;
    setVel_yIsSet(true);
    return this;
  }

  public void unsetVel_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEL_Y_ISSET_ID);
  }

  /** Returns true if field vel_y is set (has been assigned a value) and false otherwise */
  public boolean isSetVel_y() {
    return EncodingUtils.testBit(__isset_bitfield, __VEL_Y_ISSET_ID);
  }

  public void setVel_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEL_Y_ISSET_ID, value);
  }

  public double getVel_z() {
    return this.vel_z;
  }

  public Localize setVel_z(double vel_z) {
    this.vel_z = vel_z;
    setVel_zIsSet(true);
    return this;
  }

  public void unsetVel_z() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEL_Z_ISSET_ID);
  }

  /** Returns true if field vel_z is set (has been assigned a value) and false otherwise */
  public boolean isSetVel_z() {
    return EncodingUtils.testBit(__isset_bitfield, __VEL_Z_ISSET_ID);
  }

  public void setVel_zIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEL_Z_ISSET_ID, value);
  }

  public double getAcc_x() {
    return this.acc_x;
  }

  public Localize setAcc_x(double acc_x) {
    this.acc_x = acc_x;
    setAcc_xIsSet(true);
    return this;
  }

  public void unsetAcc_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACC_X_ISSET_ID);
  }

  /** Returns true if field acc_x is set (has been assigned a value) and false otherwise */
  public boolean isSetAcc_x() {
    return EncodingUtils.testBit(__isset_bitfield, __ACC_X_ISSET_ID);
  }

  public void setAcc_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACC_X_ISSET_ID, value);
  }

  public double getAcc_y() {
    return this.acc_y;
  }

  public Localize setAcc_y(double acc_y) {
    this.acc_y = acc_y;
    setAcc_yIsSet(true);
    return this;
  }

  public void unsetAcc_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACC_Y_ISSET_ID);
  }

  /** Returns true if field acc_y is set (has been assigned a value) and false otherwise */
  public boolean isSetAcc_y() {
    return EncodingUtils.testBit(__isset_bitfield, __ACC_Y_ISSET_ID);
  }

  public void setAcc_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACC_Y_ISSET_ID, value);
  }

  public double getAcc_z() {
    return this.acc_z;
  }

  public Localize setAcc_z(double acc_z) {
    this.acc_z = acc_z;
    setAcc_zIsSet(true);
    return this;
  }

  public void unsetAcc_z() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACC_Z_ISSET_ID);
  }

  /** Returns true if field acc_z is set (has been assigned a value) and false otherwise */
  public boolean isSetAcc_z() {
    return EncodingUtils.testBit(__isset_bitfield, __ACC_Z_ISSET_ID);
  }

  public void setAcc_zIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACC_Z_ISSET_ID, value);
  }

  public short getNav_mode() {
    return this.nav_mode;
  }

  public Localize setNav_mode(short nav_mode) {
    this.nav_mode = nav_mode;
    setNav_modeIsSet(true);
    return this;
  }

  public void unsetNav_mode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAV_MODE_ISSET_ID);
  }

  /** Returns true if field nav_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetNav_mode() {
    return EncodingUtils.testBit(__isset_bitfield, __NAV_MODE_ISSET_ID);
  }

  public void setNav_modeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAV_MODE_ISSET_ID, value);
  }

  public short getPos_mode() {
    return this.pos_mode;
  }

  public Localize setPos_mode(short pos_mode) {
    this.pos_mode = pos_mode;
    setPos_modeIsSet(true);
    return this;
  }

  public void unsetPos_mode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POS_MODE_ISSET_ID);
  }

  /** Returns true if field pos_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetPos_mode() {
    return EncodingUtils.testBit(__isset_bitfield, __POS_MODE_ISSET_ID);
  }

  public void setPos_modeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POS_MODE_ISSET_ID, value);
  }

  public short getVel_mode() {
    return this.vel_mode;
  }

  public Localize setVel_mode(short vel_mode) {
    this.vel_mode = vel_mode;
    setVel_modeIsSet(true);
    return this;
  }

  public void unsetVel_mode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEL_MODE_ISSET_ID);
  }

  /** Returns true if field vel_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetVel_mode() {
    return EncodingUtils.testBit(__isset_bitfield, __VEL_MODE_ISSET_ID);
  }

  public void setVel_modeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEL_MODE_ISSET_ID, value);
  }

  public short getAtt_mode() {
    return this.att_mode;
  }

  public Localize setAtt_mode(short att_mode) {
    this.att_mode = att_mode;
    setAtt_modeIsSet(true);
    return this;
  }

  public void unsetAtt_mode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATT_MODE_ISSET_ID);
  }

  /** Returns true if field att_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetAtt_mode() {
    return EncodingUtils.testBit(__isset_bitfield, __ATT_MODE_ISSET_ID);
  }

  public void setAtt_modeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATT_MODE_ISSET_ID, value);
  }

  public double getAngular_vel_x() {
    return this.angular_vel_x;
  }

  public Localize setAngular_vel_x(double angular_vel_x) {
    this.angular_vel_x = angular_vel_x;
    setAngular_vel_xIsSet(true);
    return this;
  }

  public void unsetAngular_vel_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANGULAR_VEL_X_ISSET_ID);
  }

  /** Returns true if field angular_vel_x is set (has been assigned a value) and false otherwise */
  public boolean isSetAngular_vel_x() {
    return EncodingUtils.testBit(__isset_bitfield, __ANGULAR_VEL_X_ISSET_ID);
  }

  public void setAngular_vel_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANGULAR_VEL_X_ISSET_ID, value);
  }

  public double getAngular_vel_y() {
    return this.angular_vel_y;
  }

  public Localize setAngular_vel_y(double angular_vel_y) {
    this.angular_vel_y = angular_vel_y;
    setAngular_vel_yIsSet(true);
    return this;
  }

  public void unsetAngular_vel_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANGULAR_VEL_Y_ISSET_ID);
  }

  /** Returns true if field angular_vel_y is set (has been assigned a value) and false otherwise */
  public boolean isSetAngular_vel_y() {
    return EncodingUtils.testBit(__isset_bitfield, __ANGULAR_VEL_Y_ISSET_ID);
  }

  public void setAngular_vel_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANGULAR_VEL_Y_ISSET_ID, value);
  }

  public double getAngular_vel_z() {
    return this.angular_vel_z;
  }

  public Localize setAngular_vel_z(double angular_vel_z) {
    this.angular_vel_z = angular_vel_z;
    setAngular_vel_zIsSet(true);
    return this;
  }

  public void unsetAngular_vel_z() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANGULAR_VEL_Z_ISSET_ID);
  }

  /** Returns true if field angular_vel_z is set (has been assigned a value) and false otherwise */
  public boolean isSetAngular_vel_z() {
    return EncodingUtils.testBit(__isset_bitfield, __ANGULAR_VEL_Z_ISSET_ID);
  }

  public void setAngular_vel_zIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANGULAR_VEL_Z_ISSET_ID, value);
  }

  public double getHeading() {
    return this.heading;
  }

  public Localize setHeading(double heading) {
    this.heading = heading;
    setHeadingIsSet(true);
    return this;
  }

  public void unsetHeading() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEADING_ISSET_ID);
  }

  /** Returns true if field heading is set (has been assigned a value) and false otherwise */
  public boolean isSetHeading() {
    return EncodingUtils.testBit(__isset_bitfield, __HEADING_ISSET_ID);
  }

  public void setHeadingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEADING_ISSET_ID, value);
  }

  public double getPitch() {
    return this.pitch;
  }

  public Localize setPitch(double pitch) {
    this.pitch = pitch;
    setPitchIsSet(true);
    return this;
  }

  public void unsetPitch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PITCH_ISSET_ID);
  }

  /** Returns true if field pitch is set (has been assigned a value) and false otherwise */
  public boolean isSetPitch() {
    return EncodingUtils.testBit(__isset_bitfield, __PITCH_ISSET_ID);
  }

  public void setPitchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PITCH_ISSET_ID, value);
  }

  public double getRoll() {
    return this.roll;
  }

  public Localize setRoll(double roll) {
    this.roll = roll;
    setRollIsSet(true);
    return this;
  }

  public void unsetRoll() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLL_ISSET_ID);
  }

  /** Returns true if field roll is set (has been assigned a value) and false otherwise */
  public boolean isSetRoll() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLL_ISSET_ID);
  }

  public void setRollIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLL_ISSET_ID, value);
  }

  public double getPose_x() {
    return this.pose_x;
  }

  public Localize setPose_x(double pose_x) {
    this.pose_x = pose_x;
    setPose_xIsSet(true);
    return this;
  }

  public void unsetPose_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSE_X_ISSET_ID);
  }

  /** Returns true if field pose_x is set (has been assigned a value) and false otherwise */
  public boolean isSetPose_x() {
    return EncodingUtils.testBit(__isset_bitfield, __POSE_X_ISSET_ID);
  }

  public void setPose_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSE_X_ISSET_ID, value);
  }

  public double getPose_y() {
    return this.pose_y;
  }

  public Localize setPose_y(double pose_y) {
    this.pose_y = pose_y;
    setPose_yIsSet(true);
    return this;
  }

  public void unsetPose_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSE_Y_ISSET_ID);
  }

  /** Returns true if field pose_y is set (has been assigned a value) and false otherwise */
  public boolean isSetPose_y() {
    return EncodingUtils.testBit(__isset_bitfield, __POSE_Y_ISSET_ID);
  }

  public void setPose_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSE_Y_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case RAW_DATA:
      if (value == null) {
        unsetRaw_data();
      } else {
        setRaw_data((String)value);
      }
      break;

    case M_TIME:
      if (value == null) {
        unsetMTime();
      } else {
        setMTime((Double)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case ALTITUDE:
      if (value == null) {
        unsetAltitude();
      } else {
        setAltitude((Double)value);
      }
      break;

    case VEL_X:
      if (value == null) {
        unsetVel_x();
      } else {
        setVel_x((Double)value);
      }
      break;

    case VEL_Y:
      if (value == null) {
        unsetVel_y();
      } else {
        setVel_y((Double)value);
      }
      break;

    case VEL_Z:
      if (value == null) {
        unsetVel_z();
      } else {
        setVel_z((Double)value);
      }
      break;

    case ACC_X:
      if (value == null) {
        unsetAcc_x();
      } else {
        setAcc_x((Double)value);
      }
      break;

    case ACC_Y:
      if (value == null) {
        unsetAcc_y();
      } else {
        setAcc_y((Double)value);
      }
      break;

    case ACC_Z:
      if (value == null) {
        unsetAcc_z();
      } else {
        setAcc_z((Double)value);
      }
      break;

    case NAV_MODE:
      if (value == null) {
        unsetNav_mode();
      } else {
        setNav_mode((Short)value);
      }
      break;

    case POS_MODE:
      if (value == null) {
        unsetPos_mode();
      } else {
        setPos_mode((Short)value);
      }
      break;

    case VEL_MODE:
      if (value == null) {
        unsetVel_mode();
      } else {
        setVel_mode((Short)value);
      }
      break;

    case ATT_MODE:
      if (value == null) {
        unsetAtt_mode();
      } else {
        setAtt_mode((Short)value);
      }
      break;

    case ANGULAR_VEL_X:
      if (value == null) {
        unsetAngular_vel_x();
      } else {
        setAngular_vel_x((Double)value);
      }
      break;

    case ANGULAR_VEL_Y:
      if (value == null) {
        unsetAngular_vel_y();
      } else {
        setAngular_vel_y((Double)value);
      }
      break;

    case ANGULAR_VEL_Z:
      if (value == null) {
        unsetAngular_vel_z();
      } else {
        setAngular_vel_z((Double)value);
      }
      break;

    case HEADING:
      if (value == null) {
        unsetHeading();
      } else {
        setHeading((Double)value);
      }
      break;

    case PITCH:
      if (value == null) {
        unsetPitch();
      } else {
        setPitch((Double)value);
      }
      break;

    case ROLL:
      if (value == null) {
        unsetRoll();
      } else {
        setRoll((Double)value);
      }
      break;

    case POSE_X:
      if (value == null) {
        unsetPose_x();
      } else {
        setPose_x((Double)value);
      }
      break;

    case POSE_Y:
      if (value == null) {
        unsetPose_y();
      } else {
        setPose_y((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case RAW_DATA:
      return getRaw_data();

    case M_TIME:
      return getMTime();

    case LATITUDE:
      return getLatitude();

    case LONGITUDE:
      return getLongitude();

    case ALTITUDE:
      return getAltitude();

    case VEL_X:
      return getVel_x();

    case VEL_Y:
      return getVel_y();

    case VEL_Z:
      return getVel_z();

    case ACC_X:
      return getAcc_x();

    case ACC_Y:
      return getAcc_y();

    case ACC_Z:
      return getAcc_z();

    case NAV_MODE:
      return getNav_mode();

    case POS_MODE:
      return getPos_mode();

    case VEL_MODE:
      return getVel_mode();

    case ATT_MODE:
      return getAtt_mode();

    case ANGULAR_VEL_X:
      return getAngular_vel_x();

    case ANGULAR_VEL_Y:
      return getAngular_vel_y();

    case ANGULAR_VEL_Z:
      return getAngular_vel_z();

    case HEADING:
      return getHeading();

    case PITCH:
      return getPitch();

    case ROLL:
      return getRoll();

    case POSE_X:
      return getPose_x();

    case POSE_Y:
      return getPose_y();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case RAW_DATA:
      return isSetRaw_data();
    case M_TIME:
      return isSetMTime();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    case ALTITUDE:
      return isSetAltitude();
    case VEL_X:
      return isSetVel_x();
    case VEL_Y:
      return isSetVel_y();
    case VEL_Z:
      return isSetVel_z();
    case ACC_X:
      return isSetAcc_x();
    case ACC_Y:
      return isSetAcc_y();
    case ACC_Z:
      return isSetAcc_z();
    case NAV_MODE:
      return isSetNav_mode();
    case POS_MODE:
      return isSetPos_mode();
    case VEL_MODE:
      return isSetVel_mode();
    case ATT_MODE:
      return isSetAtt_mode();
    case ANGULAR_VEL_X:
      return isSetAngular_vel_x();
    case ANGULAR_VEL_Y:
      return isSetAngular_vel_y();
    case ANGULAR_VEL_Z:
      return isSetAngular_vel_z();
    case HEADING:
      return isSetHeading();
    case PITCH:
      return isSetPitch();
    case ROLL:
      return isSetRoll();
    case POSE_X:
      return isSetPose_x();
    case POSE_Y:
      return isSetPose_y();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Localize)
      return this.equals((Localize)that);
    return false;
  }

  public boolean equals(Localize that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_raw_data = true && this.isSetRaw_data();
    boolean that_present_raw_data = true && that.isSetRaw_data();
    if (this_present_raw_data || that_present_raw_data) {
      if (!(this_present_raw_data && that_present_raw_data))
        return false;
      if (!this.raw_data.equals(that.raw_data))
        return false;
    }

    boolean this_present_mTime = true;
    boolean that_present_mTime = true;
    if (this_present_mTime || that_present_mTime) {
      if (!(this_present_mTime && that_present_mTime))
        return false;
      if (this.mTime != that.mTime)
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_altitude = true;
    boolean that_present_altitude = true;
    if (this_present_altitude || that_present_altitude) {
      if (!(this_present_altitude && that_present_altitude))
        return false;
      if (this.altitude != that.altitude)
        return false;
    }

    boolean this_present_vel_x = true;
    boolean that_present_vel_x = true;
    if (this_present_vel_x || that_present_vel_x) {
      if (!(this_present_vel_x && that_present_vel_x))
        return false;
      if (this.vel_x != that.vel_x)
        return false;
    }

    boolean this_present_vel_y = true;
    boolean that_present_vel_y = true;
    if (this_present_vel_y || that_present_vel_y) {
      if (!(this_present_vel_y && that_present_vel_y))
        return false;
      if (this.vel_y != that.vel_y)
        return false;
    }

    boolean this_present_vel_z = true;
    boolean that_present_vel_z = true;
    if (this_present_vel_z || that_present_vel_z) {
      if (!(this_present_vel_z && that_present_vel_z))
        return false;
      if (this.vel_z != that.vel_z)
        return false;
    }

    boolean this_present_acc_x = true;
    boolean that_present_acc_x = true;
    if (this_present_acc_x || that_present_acc_x) {
      if (!(this_present_acc_x && that_present_acc_x))
        return false;
      if (this.acc_x != that.acc_x)
        return false;
    }

    boolean this_present_acc_y = true;
    boolean that_present_acc_y = true;
    if (this_present_acc_y || that_present_acc_y) {
      if (!(this_present_acc_y && that_present_acc_y))
        return false;
      if (this.acc_y != that.acc_y)
        return false;
    }

    boolean this_present_acc_z = true;
    boolean that_present_acc_z = true;
    if (this_present_acc_z || that_present_acc_z) {
      if (!(this_present_acc_z && that_present_acc_z))
        return false;
      if (this.acc_z != that.acc_z)
        return false;
    }

    boolean this_present_nav_mode = true;
    boolean that_present_nav_mode = true;
    if (this_present_nav_mode || that_present_nav_mode) {
      if (!(this_present_nav_mode && that_present_nav_mode))
        return false;
      if (this.nav_mode != that.nav_mode)
        return false;
    }

    boolean this_present_pos_mode = true;
    boolean that_present_pos_mode = true;
    if (this_present_pos_mode || that_present_pos_mode) {
      if (!(this_present_pos_mode && that_present_pos_mode))
        return false;
      if (this.pos_mode != that.pos_mode)
        return false;
    }

    boolean this_present_vel_mode = true;
    boolean that_present_vel_mode = true;
    if (this_present_vel_mode || that_present_vel_mode) {
      if (!(this_present_vel_mode && that_present_vel_mode))
        return false;
      if (this.vel_mode != that.vel_mode)
        return false;
    }

    boolean this_present_att_mode = true;
    boolean that_present_att_mode = true;
    if (this_present_att_mode || that_present_att_mode) {
      if (!(this_present_att_mode && that_present_att_mode))
        return false;
      if (this.att_mode != that.att_mode)
        return false;
    }

    boolean this_present_angular_vel_x = true;
    boolean that_present_angular_vel_x = true;
    if (this_present_angular_vel_x || that_present_angular_vel_x) {
      if (!(this_present_angular_vel_x && that_present_angular_vel_x))
        return false;
      if (this.angular_vel_x != that.angular_vel_x)
        return false;
    }

    boolean this_present_angular_vel_y = true;
    boolean that_present_angular_vel_y = true;
    if (this_present_angular_vel_y || that_present_angular_vel_y) {
      if (!(this_present_angular_vel_y && that_present_angular_vel_y))
        return false;
      if (this.angular_vel_y != that.angular_vel_y)
        return false;
    }

    boolean this_present_angular_vel_z = true;
    boolean that_present_angular_vel_z = true;
    if (this_present_angular_vel_z || that_present_angular_vel_z) {
      if (!(this_present_angular_vel_z && that_present_angular_vel_z))
        return false;
      if (this.angular_vel_z != that.angular_vel_z)
        return false;
    }

    boolean this_present_heading = true;
    boolean that_present_heading = true;
    if (this_present_heading || that_present_heading) {
      if (!(this_present_heading && that_present_heading))
        return false;
      if (this.heading != that.heading)
        return false;
    }

    boolean this_present_pitch = true;
    boolean that_present_pitch = true;
    if (this_present_pitch || that_present_pitch) {
      if (!(this_present_pitch && that_present_pitch))
        return false;
      if (this.pitch != that.pitch)
        return false;
    }

    boolean this_present_roll = true;
    boolean that_present_roll = true;
    if (this_present_roll || that_present_roll) {
      if (!(this_present_roll && that_present_roll))
        return false;
      if (this.roll != that.roll)
        return false;
    }

    boolean this_present_pose_x = true;
    boolean that_present_pose_x = true;
    if (this_present_pose_x || that_present_pose_x) {
      if (!(this_present_pose_x && that_present_pose_x))
        return false;
      if (this.pose_x != that.pose_x)
        return false;
    }

    boolean this_present_pose_y = true;
    boolean that_present_pose_y = true;
    if (this_present_pose_y || that_present_pose_y) {
      if (!(this_present_pose_y && that_present_pose_y))
        return false;
      if (this.pose_y != that.pose_y)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_raw_data = true && (isSetRaw_data());
    list.add(present_raw_data);
    if (present_raw_data)
      list.add(raw_data);

    boolean present_mTime = true;
    list.add(present_mTime);
    if (present_mTime)
      list.add(mTime);

    boolean present_latitude = true;
    list.add(present_latitude);
    if (present_latitude)
      list.add(latitude);

    boolean present_longitude = true;
    list.add(present_longitude);
    if (present_longitude)
      list.add(longitude);

    boolean present_altitude = true;
    list.add(present_altitude);
    if (present_altitude)
      list.add(altitude);

    boolean present_vel_x = true;
    list.add(present_vel_x);
    if (present_vel_x)
      list.add(vel_x);

    boolean present_vel_y = true;
    list.add(present_vel_y);
    if (present_vel_y)
      list.add(vel_y);

    boolean present_vel_z = true;
    list.add(present_vel_z);
    if (present_vel_z)
      list.add(vel_z);

    boolean present_acc_x = true;
    list.add(present_acc_x);
    if (present_acc_x)
      list.add(acc_x);

    boolean present_acc_y = true;
    list.add(present_acc_y);
    if (present_acc_y)
      list.add(acc_y);

    boolean present_acc_z = true;
    list.add(present_acc_z);
    if (present_acc_z)
      list.add(acc_z);

    boolean present_nav_mode = true;
    list.add(present_nav_mode);
    if (present_nav_mode)
      list.add(nav_mode);

    boolean present_pos_mode = true;
    list.add(present_pos_mode);
    if (present_pos_mode)
      list.add(pos_mode);

    boolean present_vel_mode = true;
    list.add(present_vel_mode);
    if (present_vel_mode)
      list.add(vel_mode);

    boolean present_att_mode = true;
    list.add(present_att_mode);
    if (present_att_mode)
      list.add(att_mode);

    boolean present_angular_vel_x = true;
    list.add(present_angular_vel_x);
    if (present_angular_vel_x)
      list.add(angular_vel_x);

    boolean present_angular_vel_y = true;
    list.add(present_angular_vel_y);
    if (present_angular_vel_y)
      list.add(angular_vel_y);

    boolean present_angular_vel_z = true;
    list.add(present_angular_vel_z);
    if (present_angular_vel_z)
      list.add(angular_vel_z);

    boolean present_heading = true;
    list.add(present_heading);
    if (present_heading)
      list.add(heading);

    boolean present_pitch = true;
    list.add(present_pitch);
    if (present_pitch)
      list.add(pitch);

    boolean present_roll = true;
    list.add(present_roll);
    if (present_roll)
      list.add(roll);

    boolean present_pose_x = true;
    list.add(present_pose_x);
    if (present_pose_x)
      list.add(pose_x);

    boolean present_pose_y = true;
    list.add(present_pose_y);
    if (present_pose_y)
      list.add(pose_y);

    return list.hashCode();
  }

  @Override
  public int compareTo(Localize other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaw_data()).compareTo(other.isSetRaw_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaw_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raw_data, other.raw_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMTime()).compareTo(other.isSetMTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mTime, other.mTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAltitude()).compareTo(other.isSetAltitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAltitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.altitude, other.altitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVel_x()).compareTo(other.isSetVel_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVel_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vel_x, other.vel_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVel_y()).compareTo(other.isSetVel_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVel_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vel_y, other.vel_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVel_z()).compareTo(other.isSetVel_z());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVel_z()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vel_z, other.vel_z);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcc_x()).compareTo(other.isSetAcc_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcc_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acc_x, other.acc_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcc_y()).compareTo(other.isSetAcc_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcc_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acc_y, other.acc_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcc_z()).compareTo(other.isSetAcc_z());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcc_z()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acc_z, other.acc_z);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNav_mode()).compareTo(other.isSetNav_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNav_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nav_mode, other.nav_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPos_mode()).compareTo(other.isSetPos_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPos_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos_mode, other.pos_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVel_mode()).compareTo(other.isSetVel_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVel_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vel_mode, other.vel_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAtt_mode()).compareTo(other.isSetAtt_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtt_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att_mode, other.att_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAngular_vel_x()).compareTo(other.isSetAngular_vel_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAngular_vel_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.angular_vel_x, other.angular_vel_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAngular_vel_y()).compareTo(other.isSetAngular_vel_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAngular_vel_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.angular_vel_y, other.angular_vel_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAngular_vel_z()).compareTo(other.isSetAngular_vel_z());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAngular_vel_z()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.angular_vel_z, other.angular_vel_z);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeading()).compareTo(other.isSetHeading());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeading()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heading, other.heading);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPitch()).compareTo(other.isSetPitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pitch, other.pitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoll()).compareTo(other.isSetRoll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roll, other.roll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPose_x()).compareTo(other.isSetPose_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPose_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pose_x, other.pose_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPose_y()).compareTo(other.isSetPose_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPose_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pose_y, other.pose_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Localize(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raw_data:");
    if (this.raw_data == null) {
      sb.append("null");
    } else {
      sb.append(this.raw_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mTime:");
    sb.append(this.mTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("altitude:");
    sb.append(this.altitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vel_x:");
    sb.append(this.vel_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vel_y:");
    sb.append(this.vel_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vel_z:");
    sb.append(this.vel_z);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acc_x:");
    sb.append(this.acc_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acc_y:");
    sb.append(this.acc_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acc_z:");
    sb.append(this.acc_z);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nav_mode:");
    sb.append(this.nav_mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pos_mode:");
    sb.append(this.pos_mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vel_mode:");
    sb.append(this.vel_mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("att_mode:");
    sb.append(this.att_mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("angular_vel_x:");
    sb.append(this.angular_vel_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("angular_vel_y:");
    sb.append(this.angular_vel_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("angular_vel_z:");
    sb.append(this.angular_vel_z);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heading:");
    sb.append(this.heading);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pitch:");
    sb.append(this.pitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roll:");
    sb.append(this.roll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pose_x:");
    sb.append(this.pose_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pose_y:");
    sb.append(this.pose_y);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocalizeStandardSchemeFactory implements SchemeFactory {
    public LocalizeStandardScheme getScheme() {
      return new LocalizeStandardScheme();
    }
  }

  private static class LocalizeStandardScheme extends StandardScheme<Localize> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Localize struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RAW_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.raw_data = iprot.readString();
              struct.setRaw_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mTime = iprot.readDouble();
              struct.setMTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALTITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.altitude = iprot.readDouble();
              struct.setAltitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VEL_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vel_x = iprot.readDouble();
              struct.setVel_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VEL_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vel_y = iprot.readDouble();
              struct.setVel_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VEL_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vel_z = iprot.readDouble();
              struct.setVel_zIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACC_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.acc_x = iprot.readDouble();
              struct.setAcc_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACC_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.acc_y = iprot.readDouble();
              struct.setAcc_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACC_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.acc_z = iprot.readDouble();
              struct.setAcc_zIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NAV_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.nav_mode = iprot.readI16();
              struct.setNav_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POS_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.pos_mode = iprot.readI16();
              struct.setPos_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VEL_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.vel_mode = iprot.readI16();
              struct.setVel_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ATT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.att_mode = iprot.readI16();
              struct.setAtt_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ANGULAR_VEL_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.angular_vel_x = iprot.readDouble();
              struct.setAngular_vel_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ANGULAR_VEL_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.angular_vel_y = iprot.readDouble();
              struct.setAngular_vel_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ANGULAR_VEL_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.angular_vel_z = iprot.readDouble();
              struct.setAngular_vel_zIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HEADING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.heading = iprot.readDouble();
              struct.setHeadingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pitch = iprot.readDouble();
              struct.setPitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ROLL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.roll = iprot.readDouble();
              struct.setRollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // POSE_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pose_x = iprot.readDouble();
              struct.setPose_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // POSE_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pose_y = iprot.readDouble();
              struct.setPose_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Localize struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.raw_data != null) {
        oprot.writeFieldBegin(RAW_DATA_FIELD_DESC);
        oprot.writeString(struct.raw_data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(M_TIME_FIELD_DESC);
      oprot.writeDouble(struct.mTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.latitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALTITUDE_FIELD_DESC);
      oprot.writeDouble(struct.altitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEL_X_FIELD_DESC);
      oprot.writeDouble(struct.vel_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEL_Y_FIELD_DESC);
      oprot.writeDouble(struct.vel_y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEL_Z_FIELD_DESC);
      oprot.writeDouble(struct.vel_z);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACC_X_FIELD_DESC);
      oprot.writeDouble(struct.acc_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACC_Y_FIELD_DESC);
      oprot.writeDouble(struct.acc_y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACC_Z_FIELD_DESC);
      oprot.writeDouble(struct.acc_z);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAV_MODE_FIELD_DESC);
      oprot.writeI16(struct.nav_mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_MODE_FIELD_DESC);
      oprot.writeI16(struct.pos_mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEL_MODE_FIELD_DESC);
      oprot.writeI16(struct.vel_mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATT_MODE_FIELD_DESC);
      oprot.writeI16(struct.att_mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANGULAR_VEL_X_FIELD_DESC);
      oprot.writeDouble(struct.angular_vel_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANGULAR_VEL_Y_FIELD_DESC);
      oprot.writeDouble(struct.angular_vel_y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANGULAR_VEL_Z_FIELD_DESC);
      oprot.writeDouble(struct.angular_vel_z);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEADING_FIELD_DESC);
      oprot.writeDouble(struct.heading);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PITCH_FIELD_DESC);
      oprot.writeDouble(struct.pitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLL_FIELD_DESC);
      oprot.writeDouble(struct.roll);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSE_X_FIELD_DESC);
      oprot.writeDouble(struct.pose_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSE_Y_FIELD_DESC);
      oprot.writeDouble(struct.pose_y);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocalizeTupleSchemeFactory implements SchemeFactory {
    public LocalizeTupleScheme getScheme() {
      return new LocalizeTupleScheme();
    }
  }

  private static class LocalizeTupleScheme extends TupleScheme<Localize> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Localize struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetRaw_data()) {
        optionals.set(1);
      }
      if (struct.isSetMTime()) {
        optionals.set(2);
      }
      if (struct.isSetLatitude()) {
        optionals.set(3);
      }
      if (struct.isSetLongitude()) {
        optionals.set(4);
      }
      if (struct.isSetAltitude()) {
        optionals.set(5);
      }
      if (struct.isSetVel_x()) {
        optionals.set(6);
      }
      if (struct.isSetVel_y()) {
        optionals.set(7);
      }
      if (struct.isSetVel_z()) {
        optionals.set(8);
      }
      if (struct.isSetAcc_x()) {
        optionals.set(9);
      }
      if (struct.isSetAcc_y()) {
        optionals.set(10);
      }
      if (struct.isSetAcc_z()) {
        optionals.set(11);
      }
      if (struct.isSetNav_mode()) {
        optionals.set(12);
      }
      if (struct.isSetPos_mode()) {
        optionals.set(13);
      }
      if (struct.isSetVel_mode()) {
        optionals.set(14);
      }
      if (struct.isSetAtt_mode()) {
        optionals.set(15);
      }
      if (struct.isSetAngular_vel_x()) {
        optionals.set(16);
      }
      if (struct.isSetAngular_vel_y()) {
        optionals.set(17);
      }
      if (struct.isSetAngular_vel_z()) {
        optionals.set(18);
      }
      if (struct.isSetHeading()) {
        optionals.set(19);
      }
      if (struct.isSetPitch()) {
        optionals.set(20);
      }
      if (struct.isSetRoll()) {
        optionals.set(21);
      }
      if (struct.isSetPose_x()) {
        optionals.set(22);
      }
      if (struct.isSetPose_y()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetRaw_data()) {
        oprot.writeString(struct.raw_data);
      }
      if (struct.isSetMTime()) {
        oprot.writeDouble(struct.mTime);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetAltitude()) {
        oprot.writeDouble(struct.altitude);
      }
      if (struct.isSetVel_x()) {
        oprot.writeDouble(struct.vel_x);
      }
      if (struct.isSetVel_y()) {
        oprot.writeDouble(struct.vel_y);
      }
      if (struct.isSetVel_z()) {
        oprot.writeDouble(struct.vel_z);
      }
      if (struct.isSetAcc_x()) {
        oprot.writeDouble(struct.acc_x);
      }
      if (struct.isSetAcc_y()) {
        oprot.writeDouble(struct.acc_y);
      }
      if (struct.isSetAcc_z()) {
        oprot.writeDouble(struct.acc_z);
      }
      if (struct.isSetNav_mode()) {
        oprot.writeI16(struct.nav_mode);
      }
      if (struct.isSetPos_mode()) {
        oprot.writeI16(struct.pos_mode);
      }
      if (struct.isSetVel_mode()) {
        oprot.writeI16(struct.vel_mode);
      }
      if (struct.isSetAtt_mode()) {
        oprot.writeI16(struct.att_mode);
      }
      if (struct.isSetAngular_vel_x()) {
        oprot.writeDouble(struct.angular_vel_x);
      }
      if (struct.isSetAngular_vel_y()) {
        oprot.writeDouble(struct.angular_vel_y);
      }
      if (struct.isSetAngular_vel_z()) {
        oprot.writeDouble(struct.angular_vel_z);
      }
      if (struct.isSetHeading()) {
        oprot.writeDouble(struct.heading);
      }
      if (struct.isSetPitch()) {
        oprot.writeDouble(struct.pitch);
      }
      if (struct.isSetRoll()) {
        oprot.writeDouble(struct.roll);
      }
      if (struct.isSetPose_x()) {
        oprot.writeDouble(struct.pose_x);
      }
      if (struct.isSetPose_y()) {
        oprot.writeDouble(struct.pose_y);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Localize struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.raw_data = iprot.readString();
        struct.setRaw_dataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mTime = iprot.readDouble();
        struct.setMTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.altitude = iprot.readDouble();
        struct.setAltitudeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.vel_x = iprot.readDouble();
        struct.setVel_xIsSet(true);
      }
      if (incoming.get(7)) {
        struct.vel_y = iprot.readDouble();
        struct.setVel_yIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vel_z = iprot.readDouble();
        struct.setVel_zIsSet(true);
      }
      if (incoming.get(9)) {
        struct.acc_x = iprot.readDouble();
        struct.setAcc_xIsSet(true);
      }
      if (incoming.get(10)) {
        struct.acc_y = iprot.readDouble();
        struct.setAcc_yIsSet(true);
      }
      if (incoming.get(11)) {
        struct.acc_z = iprot.readDouble();
        struct.setAcc_zIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nav_mode = iprot.readI16();
        struct.setNav_modeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pos_mode = iprot.readI16();
        struct.setPos_modeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.vel_mode = iprot.readI16();
        struct.setVel_modeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.att_mode = iprot.readI16();
        struct.setAtt_modeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.angular_vel_x = iprot.readDouble();
        struct.setAngular_vel_xIsSet(true);
      }
      if (incoming.get(17)) {
        struct.angular_vel_y = iprot.readDouble();
        struct.setAngular_vel_yIsSet(true);
      }
      if (incoming.get(18)) {
        struct.angular_vel_z = iprot.readDouble();
        struct.setAngular_vel_zIsSet(true);
      }
      if (incoming.get(19)) {
        struct.heading = iprot.readDouble();
        struct.setHeadingIsSet(true);
      }
      if (incoming.get(20)) {
        struct.pitch = iprot.readDouble();
        struct.setPitchIsSet(true);
      }
      if (incoming.get(21)) {
        struct.roll = iprot.readDouble();
        struct.setRollIsSet(true);
      }
      if (incoming.get(22)) {
        struct.pose_x = iprot.readDouble();
        struct.setPose_xIsSet(true);
      }
      if (incoming.get(23)) {
        struct.pose_y = iprot.readDouble();
        struct.setPose_yIsSet(true);
      }
    }
  }

}

