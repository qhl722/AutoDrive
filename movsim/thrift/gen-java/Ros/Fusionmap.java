/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Ros;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-26")
public class Fusionmap implements org.apache.thrift.TBase<Fusionmap, Fusionmap._Fields>, java.io.Serializable, Cloneable, Comparable<Fusionmap> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Fusionmap");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DYNAMIC_OBJECT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamic_object_list", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OBSTACLE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("obstacle_map", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SECTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("section_list", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField POSE_FIELD_DESC = new org.apache.thrift.protocol.TField("pose", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FusionmapStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FusionmapTupleSchemeFactory());
  }

  public long timestamp; // required
  public List<DynamicObstacle> dynamic_object_list; // required
  public GridMap obstacle_map; // required
  public List<SectionList> section_list; // required
  public Pose pose; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    DYNAMIC_OBJECT_LIST((short)2, "dynamic_object_list"),
    OBSTACLE_MAP((short)3, "obstacle_map"),
    SECTION_LIST((short)4, "section_list"),
    POSE((short)5, "pose");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // DYNAMIC_OBJECT_LIST
          return DYNAMIC_OBJECT_LIST;
        case 3: // OBSTACLE_MAP
          return OBSTACLE_MAP;
        case 4: // SECTION_LIST
          return SECTION_LIST;
        case 5: // POSE
          return POSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DYNAMIC_OBJECT_LIST, new org.apache.thrift.meta_data.FieldMetaData("dynamic_object_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DynamicObstacle.class))));
    tmpMap.put(_Fields.OBSTACLE_MAP, new org.apache.thrift.meta_data.FieldMetaData("obstacle_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GridMap.class)));
    tmpMap.put(_Fields.SECTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("section_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SectionList.class))));
    tmpMap.put(_Fields.POSE, new org.apache.thrift.meta_data.FieldMetaData("pose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pose.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Fusionmap.class, metaDataMap);
  }

  public Fusionmap() {
  }

  public Fusionmap(
    long timestamp,
    List<DynamicObstacle> dynamic_object_list,
    GridMap obstacle_map,
    List<SectionList> section_list,
    Pose pose)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.dynamic_object_list = dynamic_object_list;
    this.obstacle_map = obstacle_map;
    this.section_list = section_list;
    this.pose = pose;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Fusionmap(Fusionmap other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetDynamic_object_list()) {
      List<DynamicObstacle> __this__dynamic_object_list = new ArrayList<DynamicObstacle>(other.dynamic_object_list.size());
      for (DynamicObstacle other_element : other.dynamic_object_list) {
        __this__dynamic_object_list.add(new DynamicObstacle(other_element));
      }
      this.dynamic_object_list = __this__dynamic_object_list;
    }
    if (other.isSetObstacle_map()) {
      this.obstacle_map = new GridMap(other.obstacle_map);
    }
    if (other.isSetSection_list()) {
      List<SectionList> __this__section_list = new ArrayList<SectionList>(other.section_list.size());
      for (SectionList other_element : other.section_list) {
        __this__section_list.add(new SectionList(other_element));
      }
      this.section_list = __this__section_list;
    }
    if (other.isSetPose()) {
      this.pose = new Pose(other.pose);
    }
  }

  public Fusionmap deepCopy() {
    return new Fusionmap(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.dynamic_object_list = null;
    this.obstacle_map = null;
    this.section_list = null;
    this.pose = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Fusionmap setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getDynamic_object_listSize() {
    return (this.dynamic_object_list == null) ? 0 : this.dynamic_object_list.size();
  }

  public java.util.Iterator<DynamicObstacle> getDynamic_object_listIterator() {
    return (this.dynamic_object_list == null) ? null : this.dynamic_object_list.iterator();
  }

  public void addToDynamic_object_list(DynamicObstacle elem) {
    if (this.dynamic_object_list == null) {
      this.dynamic_object_list = new ArrayList<DynamicObstacle>();
    }
    this.dynamic_object_list.add(elem);
  }

  public List<DynamicObstacle> getDynamic_object_list() {
    return this.dynamic_object_list;
  }

  public Fusionmap setDynamic_object_list(List<DynamicObstacle> dynamic_object_list) {
    this.dynamic_object_list = dynamic_object_list;
    return this;
  }

  public void unsetDynamic_object_list() {
    this.dynamic_object_list = null;
  }

  /** Returns true if field dynamic_object_list is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamic_object_list() {
    return this.dynamic_object_list != null;
  }

  public void setDynamic_object_listIsSet(boolean value) {
    if (!value) {
      this.dynamic_object_list = null;
    }
  }

  public GridMap getObstacle_map() {
    return this.obstacle_map;
  }

  public Fusionmap setObstacle_map(GridMap obstacle_map) {
    this.obstacle_map = obstacle_map;
    return this;
  }

  public void unsetObstacle_map() {
    this.obstacle_map = null;
  }

  /** Returns true if field obstacle_map is set (has been assigned a value) and false otherwise */
  public boolean isSetObstacle_map() {
    return this.obstacle_map != null;
  }

  public void setObstacle_mapIsSet(boolean value) {
    if (!value) {
      this.obstacle_map = null;
    }
  }

  public int getSection_listSize() {
    return (this.section_list == null) ? 0 : this.section_list.size();
  }

  public java.util.Iterator<SectionList> getSection_listIterator() {
    return (this.section_list == null) ? null : this.section_list.iterator();
  }

  public void addToSection_list(SectionList elem) {
    if (this.section_list == null) {
      this.section_list = new ArrayList<SectionList>();
    }
    this.section_list.add(elem);
  }

  public List<SectionList> getSection_list() {
    return this.section_list;
  }

  public Fusionmap setSection_list(List<SectionList> section_list) {
    this.section_list = section_list;
    return this;
  }

  public void unsetSection_list() {
    this.section_list = null;
  }

  /** Returns true if field section_list is set (has been assigned a value) and false otherwise */
  public boolean isSetSection_list() {
    return this.section_list != null;
  }

  public void setSection_listIsSet(boolean value) {
    if (!value) {
      this.section_list = null;
    }
  }

  public Pose getPose() {
    return this.pose;
  }

  public Fusionmap setPose(Pose pose) {
    this.pose = pose;
    return this;
  }

  public void unsetPose() {
    this.pose = null;
  }

  /** Returns true if field pose is set (has been assigned a value) and false otherwise */
  public boolean isSetPose() {
    return this.pose != null;
  }

  public void setPoseIsSet(boolean value) {
    if (!value) {
      this.pose = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case DYNAMIC_OBJECT_LIST:
      if (value == null) {
        unsetDynamic_object_list();
      } else {
        setDynamic_object_list((List<DynamicObstacle>)value);
      }
      break;

    case OBSTACLE_MAP:
      if (value == null) {
        unsetObstacle_map();
      } else {
        setObstacle_map((GridMap)value);
      }
      break;

    case SECTION_LIST:
      if (value == null) {
        unsetSection_list();
      } else {
        setSection_list((List<SectionList>)value);
      }
      break;

    case POSE:
      if (value == null) {
        unsetPose();
      } else {
        setPose((Pose)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case DYNAMIC_OBJECT_LIST:
      return getDynamic_object_list();

    case OBSTACLE_MAP:
      return getObstacle_map();

    case SECTION_LIST:
      return getSection_list();

    case POSE:
      return getPose();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case DYNAMIC_OBJECT_LIST:
      return isSetDynamic_object_list();
    case OBSTACLE_MAP:
      return isSetObstacle_map();
    case SECTION_LIST:
      return isSetSection_list();
    case POSE:
      return isSetPose();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Fusionmap)
      return this.equals((Fusionmap)that);
    return false;
  }

  public boolean equals(Fusionmap that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_dynamic_object_list = true && this.isSetDynamic_object_list();
    boolean that_present_dynamic_object_list = true && that.isSetDynamic_object_list();
    if (this_present_dynamic_object_list || that_present_dynamic_object_list) {
      if (!(this_present_dynamic_object_list && that_present_dynamic_object_list))
        return false;
      if (!this.dynamic_object_list.equals(that.dynamic_object_list))
        return false;
    }

    boolean this_present_obstacle_map = true && this.isSetObstacle_map();
    boolean that_present_obstacle_map = true && that.isSetObstacle_map();
    if (this_present_obstacle_map || that_present_obstacle_map) {
      if (!(this_present_obstacle_map && that_present_obstacle_map))
        return false;
      if (!this.obstacle_map.equals(that.obstacle_map))
        return false;
    }

    boolean this_present_section_list = true && this.isSetSection_list();
    boolean that_present_section_list = true && that.isSetSection_list();
    if (this_present_section_list || that_present_section_list) {
      if (!(this_present_section_list && that_present_section_list))
        return false;
      if (!this.section_list.equals(that.section_list))
        return false;
    }

    boolean this_present_pose = true && this.isSetPose();
    boolean that_present_pose = true && that.isSetPose();
    if (this_present_pose || that_present_pose) {
      if (!(this_present_pose && that_present_pose))
        return false;
      if (!this.pose.equals(that.pose))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_dynamic_object_list = true && (isSetDynamic_object_list());
    list.add(present_dynamic_object_list);
    if (present_dynamic_object_list)
      list.add(dynamic_object_list);

    boolean present_obstacle_map = true && (isSetObstacle_map());
    list.add(present_obstacle_map);
    if (present_obstacle_map)
      list.add(obstacle_map);

    boolean present_section_list = true && (isSetSection_list());
    list.add(present_section_list);
    if (present_section_list)
      list.add(section_list);

    boolean present_pose = true && (isSetPose());
    list.add(present_pose);
    if (present_pose)
      list.add(pose);

    return list.hashCode();
  }

  @Override
  public int compareTo(Fusionmap other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamic_object_list()).compareTo(other.isSetDynamic_object_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamic_object_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamic_object_list, other.dynamic_object_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObstacle_map()).compareTo(other.isSetObstacle_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObstacle_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obstacle_map, other.obstacle_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSection_list()).compareTo(other.isSetSection_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSection_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section_list, other.section_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPose()).compareTo(other.isSetPose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pose, other.pose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Fusionmap(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dynamic_object_list:");
    if (this.dynamic_object_list == null) {
      sb.append("null");
    } else {
      sb.append(this.dynamic_object_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("obstacle_map:");
    if (this.obstacle_map == null) {
      sb.append("null");
    } else {
      sb.append(this.obstacle_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("section_list:");
    if (this.section_list == null) {
      sb.append("null");
    } else {
      sb.append(this.section_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pose:");
    if (this.pose == null) {
      sb.append("null");
    } else {
      sb.append(this.pose);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (obstacle_map != null) {
      obstacle_map.validate();
    }
    if (pose != null) {
      pose.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FusionmapStandardSchemeFactory implements SchemeFactory {
    public FusionmapStandardScheme getScheme() {
      return new FusionmapStandardScheme();
    }
  }

  private static class FusionmapStandardScheme extends StandardScheme<Fusionmap> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Fusionmap struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DYNAMIC_OBJECT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.dynamic_object_list = new ArrayList<DynamicObstacle>(_list48.size);
                DynamicObstacle _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new DynamicObstacle();
                  _elem49.read(iprot);
                  struct.dynamic_object_list.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setDynamic_object_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBSTACLE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.obstacle_map = new GridMap();
              struct.obstacle_map.read(iprot);
              struct.setObstacle_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.section_list = new ArrayList<SectionList>(_list51.size);
                SectionList _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = new SectionList();
                  _elem52.read(iprot);
                  struct.section_list.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setSection_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pose = new Pose();
              struct.pose.read(iprot);
              struct.setPoseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Fusionmap struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.dynamic_object_list != null) {
        oprot.writeFieldBegin(DYNAMIC_OBJECT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dynamic_object_list.size()));
          for (DynamicObstacle _iter54 : struct.dynamic_object_list)
          {
            _iter54.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.obstacle_map != null) {
        oprot.writeFieldBegin(OBSTACLE_MAP_FIELD_DESC);
        struct.obstacle_map.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.section_list != null) {
        oprot.writeFieldBegin(SECTION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.section_list.size()));
          for (SectionList _iter55 : struct.section_list)
          {
            _iter55.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pose != null) {
        oprot.writeFieldBegin(POSE_FIELD_DESC);
        struct.pose.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FusionmapTupleSchemeFactory implements SchemeFactory {
    public FusionmapTupleScheme getScheme() {
      return new FusionmapTupleScheme();
    }
  }

  private static class FusionmapTupleScheme extends TupleScheme<Fusionmap> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Fusionmap struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetDynamic_object_list()) {
        optionals.set(1);
      }
      if (struct.isSetObstacle_map()) {
        optionals.set(2);
      }
      if (struct.isSetSection_list()) {
        optionals.set(3);
      }
      if (struct.isSetPose()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetDynamic_object_list()) {
        {
          oprot.writeI32(struct.dynamic_object_list.size());
          for (DynamicObstacle _iter56 : struct.dynamic_object_list)
          {
            _iter56.write(oprot);
          }
        }
      }
      if (struct.isSetObstacle_map()) {
        struct.obstacle_map.write(oprot);
      }
      if (struct.isSetSection_list()) {
        {
          oprot.writeI32(struct.section_list.size());
          for (SectionList _iter57 : struct.section_list)
          {
            _iter57.write(oprot);
          }
        }
      }
      if (struct.isSetPose()) {
        struct.pose.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Fusionmap struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dynamic_object_list = new ArrayList<DynamicObstacle>(_list58.size);
          DynamicObstacle _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = new DynamicObstacle();
            _elem59.read(iprot);
            struct.dynamic_object_list.add(_elem59);
          }
        }
        struct.setDynamic_object_listIsSet(true);
      }
      if (incoming.get(2)) {
        struct.obstacle_map = new GridMap();
        struct.obstacle_map.read(iprot);
        struct.setObstacle_mapIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.section_list = new ArrayList<SectionList>(_list61.size);
          SectionList _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = new SectionList();
            _elem62.read(iprot);
            struct.section_list.add(_elem62);
          }
        }
        struct.setSection_listIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pose = new Pose();
        struct.pose.read(iprot);
        struct.setPoseIsSet(true);
      }
    }
  }

}

