//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.03 at 09:23:48 PM PDT 
//


package org.movsim.autogen;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for OvertakingViaPeerType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="OvertakingViaPeerType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="criticalTimeToCollisonRel" type="{}nonNegativeDouble" default="4" />
 *       &lt;attribute name="minTargetGap" type="{}nonNegativeDouble" default="100" />
 *       &lt;attribute name="maxGapBehindLeaderForOvertaking" type="{}nonNegativeDouble" default="150" />
 *       &lt;attribute name="reductionFactorFreeAcceleration" type="{}nonNegativeDouble" default="0.25" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "OvertakingViaPeerType")
public class OvertakingViaPeerType
    implements Serializable
{

    private final static long serialVersionUID = 1L;
    @XmlAttribute(name = "criticalTimeToCollisonRel")
    protected Double criticalTimeToCollisonRel;
    @XmlAttribute(name = "minTargetGap")
    protected Double minTargetGap;
    @XmlAttribute(name = "maxGapBehindLeaderForOvertaking")
    protected Double maxGapBehindLeaderForOvertaking;
    @XmlAttribute(name = "reductionFactorFreeAcceleration")
    protected Double reductionFactorFreeAcceleration;

    /**
     * Gets the value of the criticalTimeToCollisonRel property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getCriticalTimeToCollisonRel() {
        if (criticalTimeToCollisonRel == null) {
            return  4.0D;
        } else {
            return criticalTimeToCollisonRel;
        }
    }

    /**
     * Sets the value of the criticalTimeToCollisonRel property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setCriticalTimeToCollisonRel(double value) {
        this.criticalTimeToCollisonRel = value;
    }

    public boolean isSetCriticalTimeToCollisonRel() {
        return (this.criticalTimeToCollisonRel!= null);
    }

    public void unsetCriticalTimeToCollisonRel() {
        this.criticalTimeToCollisonRel = null;
    }

    /**
     * Gets the value of the minTargetGap property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getMinTargetGap() {
        if (minTargetGap == null) {
            return  100.0D;
        } else {
            return minTargetGap;
        }
    }

    /**
     * Sets the value of the minTargetGap property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setMinTargetGap(double value) {
        this.minTargetGap = value;
    }

    public boolean isSetMinTargetGap() {
        return (this.minTargetGap!= null);
    }

    public void unsetMinTargetGap() {
        this.minTargetGap = null;
    }

    /**
     * Gets the value of the maxGapBehindLeaderForOvertaking property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getMaxGapBehindLeaderForOvertaking() {
        if (maxGapBehindLeaderForOvertaking == null) {
            return  150.0D;
        } else {
            return maxGapBehindLeaderForOvertaking;
        }
    }

    /**
     * Sets the value of the maxGapBehindLeaderForOvertaking property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setMaxGapBehindLeaderForOvertaking(double value) {
        this.maxGapBehindLeaderForOvertaking = value;
    }

    public boolean isSetMaxGapBehindLeaderForOvertaking() {
        return (this.maxGapBehindLeaderForOvertaking!= null);
    }

    public void unsetMaxGapBehindLeaderForOvertaking() {
        this.maxGapBehindLeaderForOvertaking = null;
    }

    /**
     * Gets the value of the reductionFactorFreeAcceleration property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getReductionFactorFreeAcceleration() {
        if (reductionFactorFreeAcceleration == null) {
            return  0.25D;
        } else {
            return reductionFactorFreeAcceleration;
        }
    }

    /**
     * Sets the value of the reductionFactorFreeAcceleration property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setReductionFactorFreeAcceleration(double value) {
        this.reductionFactorFreeAcceleration = value;
    }

    public boolean isSetReductionFactorFreeAcceleration() {
        return (this.reductionFactorFreeAcceleration!= null);
    }

    public void unsetReductionFactorFreeAcceleration() {
        this.reductionFactorFreeAcceleration = null;
    }

}
