// Generated by gencpp from file av_msgs/ControlDebug.msg
// DO NOT EDIT!


#ifndef AV_MSGS_MESSAGE_CONTROLDEBUG_H
#define AV_MSGS_MESSAGE_CONTROLDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace av_msgs
{
template <class ContainerAllocator>
struct ControlDebug_
{
  typedef ControlDebug_<ContainerAllocator> Type;

  ControlDebug_()
    : desired_velocity(0.0)
    , current_velocity(0.0)
    , e_pose(0.0)
    , e_angle(0.0)  {
    }
  ControlDebug_(const ContainerAllocator& _alloc)
    : desired_velocity(0.0)
    , current_velocity(0.0)
    , e_pose(0.0)
    , e_angle(0.0)  {
  (void)_alloc;
    }



   typedef double _desired_velocity_type;
  _desired_velocity_type desired_velocity;

   typedef double _current_velocity_type;
  _current_velocity_type current_velocity;

   typedef double _e_pose_type;
  _e_pose_type e_pose;

   typedef double _e_angle_type;
  _e_angle_type e_angle;




  typedef boost::shared_ptr< ::av_msgs::ControlDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_msgs::ControlDebug_<ContainerAllocator> const> ConstPtr;

}; // struct ControlDebug_

typedef ::av_msgs::ControlDebug_<std::allocator<void> > ControlDebug;

typedef boost::shared_ptr< ::av_msgs::ControlDebug > ControlDebugPtr;
typedef boost::shared_ptr< ::av_msgs::ControlDebug const> ControlDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_msgs::ControlDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_msgs::ControlDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace av_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'av_msgs': ['/home/zhouji/Documents/autodrive/rpc_ws/src/common/av_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::ControlDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::ControlDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::ControlDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::ControlDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::ControlDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::ControlDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_msgs::ControlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d5523c0fa27208129ad6a5de3491e13";
  }

  static const char* value(const ::av_msgs::ControlDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d5523c0fa272081ULL;
  static const uint64_t static_value2 = 0x29ad6a5de3491e13ULL;
};

template<class ContainerAllocator>
struct DataType< ::av_msgs::ControlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_msgs/ControlDebug";
  }

  static const char* value(const ::av_msgs::ControlDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_msgs::ControlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#longitudinal\n\
float64 desired_velocity\n\
float64 current_velocity\n\
\n\
#lateral \n\
float64 e_pose\n\
float64 e_angle\n\
\n\
";
  }

  static const char* value(const ::av_msgs::ControlDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_msgs::ControlDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_velocity);
      stream.next(m.current_velocity);
      stream.next(m.e_pose);
      stream.next(m.e_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_msgs::ControlDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_msgs::ControlDebug_<ContainerAllocator>& v)
  {
    s << indent << "desired_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.desired_velocity);
    s << indent << "current_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.current_velocity);
    s << indent << "e_pose: ";
    Printer<double>::stream(s, indent + "  ", v.e_pose);
    s << indent << "e_angle: ";
    Printer<double>::stream(s, indent + "  ", v.e_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MSGS_MESSAGE_CONTROLDEBUG_H
