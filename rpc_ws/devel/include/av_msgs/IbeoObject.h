// Generated by gencpp from file av_msgs/IbeoObject.msg
// DO NOT EDIT!


#ifndef AV_MSGS_MESSAGE_IBEOOBJECT_H
#define AV_MSGS_MESSAGE_IBEOOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace av_msgs
{
template <class ContainerAllocator>
struct IbeoObject_
{
  typedef IbeoObject_<ContainerAllocator> Type;

  IbeoObject_()
    : object_id(0)
    , object_box_center_x(0.0)
    , object_box_center_y(0.0)
    , object_box_length(0.0)
    , object_box_width(0.0)
    , object_box_orientation(0.0)
    , relative_velocity_x(0.0)
    , relative_velocity_y(0.0)
    , relative_velocity_sigma_x(0.0)
    , relative_velocity_sigma_y(0.0)
    , object_class(0)
    , object_class_certainty(0.0)
    , exist_measurement(0.0)  {
    }
  IbeoObject_(const ContainerAllocator& _alloc)
    : object_id(0)
    , object_box_center_x(0.0)
    , object_box_center_y(0.0)
    , object_box_length(0.0)
    , object_box_width(0.0)
    , object_box_orientation(0.0)
    , relative_velocity_x(0.0)
    , relative_velocity_y(0.0)
    , relative_velocity_sigma_x(0.0)
    , relative_velocity_sigma_y(0.0)
    , object_class(0)
    , object_class_certainty(0.0)
    , exist_measurement(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _object_id_type;
  _object_id_type object_id;

   typedef float _object_box_center_x_type;
  _object_box_center_x_type object_box_center_x;

   typedef float _object_box_center_y_type;
  _object_box_center_y_type object_box_center_y;

   typedef float _object_box_length_type;
  _object_box_length_type object_box_length;

   typedef float _object_box_width_type;
  _object_box_width_type object_box_width;

   typedef float _object_box_orientation_type;
  _object_box_orientation_type object_box_orientation;

   typedef float _relative_velocity_x_type;
  _relative_velocity_x_type relative_velocity_x;

   typedef float _relative_velocity_y_type;
  _relative_velocity_y_type relative_velocity_y;

   typedef float _relative_velocity_sigma_x_type;
  _relative_velocity_sigma_x_type relative_velocity_sigma_x;

   typedef float _relative_velocity_sigma_y_type;
  _relative_velocity_sigma_y_type relative_velocity_sigma_y;

   typedef uint8_t _object_class_type;
  _object_class_type object_class;

   typedef float _object_class_certainty_type;
  _object_class_certainty_type object_class_certainty;

   typedef float _exist_measurement_type;
  _exist_measurement_type exist_measurement;




  typedef boost::shared_ptr< ::av_msgs::IbeoObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_msgs::IbeoObject_<ContainerAllocator> const> ConstPtr;

}; // struct IbeoObject_

typedef ::av_msgs::IbeoObject_<std::allocator<void> > IbeoObject;

typedef boost::shared_ptr< ::av_msgs::IbeoObject > IbeoObjectPtr;
typedef boost::shared_ptr< ::av_msgs::IbeoObject const> IbeoObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_msgs::IbeoObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_msgs::IbeoObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace av_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'av_msgs': ['/home/zhouji/Documents/autodrive/rpc_ws/src/common/av_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::IbeoObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::IbeoObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::IbeoObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::IbeoObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::IbeoObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::IbeoObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_msgs::IbeoObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eeb943ae30859d40f26de4eba16114d0";
  }

  static const char* value(const ::av_msgs::IbeoObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeeb943ae30859d40ULL;
  static const uint64_t static_value2 = 0xf26de4eba16114d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::av_msgs::IbeoObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_msgs/IbeoObject";
  }

  static const char* value(const ::av_msgs::IbeoObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_msgs::IbeoObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 object_id\n\
float32 object_box_center_x\n\
float32 object_box_center_y\n\
float32 object_box_length\n\
float32 object_box_width\n\
float32 object_box_orientation\n\
float32 relative_velocity_x\n\
float32 relative_velocity_y\n\
float32 relative_velocity_sigma_x\n\
float32 relative_velocity_sigma_y\n\
uint8 object_class\n\
float32 object_class_certainty\n\
float32 exist_measurement\n\
\n\
\n\
";
  }

  static const char* value(const ::av_msgs::IbeoObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_msgs::IbeoObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.object_box_center_x);
      stream.next(m.object_box_center_y);
      stream.next(m.object_box_length);
      stream.next(m.object_box_width);
      stream.next(m.object_box_orientation);
      stream.next(m.relative_velocity_x);
      stream.next(m.relative_velocity_y);
      stream.next(m.relative_velocity_sigma_x);
      stream.next(m.relative_velocity_sigma_y);
      stream.next(m.object_class);
      stream.next(m.object_class_certainty);
      stream.next(m.exist_measurement);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IbeoObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_msgs::IbeoObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_msgs::IbeoObject_<ContainerAllocator>& v)
  {
    s << indent << "object_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "object_box_center_x: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_center_x);
    s << indent << "object_box_center_y: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_center_y);
    s << indent << "object_box_length: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_length);
    s << indent << "object_box_width: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_width);
    s << indent << "object_box_orientation: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_orientation);
    s << indent << "relative_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.relative_velocity_x);
    s << indent << "relative_velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.relative_velocity_y);
    s << indent << "relative_velocity_sigma_x: ";
    Printer<float>::stream(s, indent + "  ", v.relative_velocity_sigma_x);
    s << indent << "relative_velocity_sigma_y: ";
    Printer<float>::stream(s, indent + "  ", v.relative_velocity_sigma_y);
    s << indent << "object_class: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.object_class);
    s << indent << "object_class_certainty: ";
    Printer<float>::stream(s, indent + "  ", v.object_class_certainty);
    s << indent << "exist_measurement: ";
    Printer<float>::stream(s, indent + "  ", v.exist_measurement);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MSGS_MESSAGE_IBEOOBJECT_H
