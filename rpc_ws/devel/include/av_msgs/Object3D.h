// Generated by gencpp from file av_msgs/Object3D.msg
// DO NOT EDIT!


#ifndef AV_MSGS_MESSAGE_OBJECT3D_H
#define AV_MSGS_MESSAGE_OBJECT3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace av_msgs
{
template <class ContainerAllocator>
struct Object3D_
{
  typedef Object3D_<ContainerAllocator> Type;

  Object3D_()
    : class_id(0)
    , center_x(0.0)
    , center_y(0.0)
    , center_z(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , orient(0.0)
    , confidence(0.0)  {
    }
  Object3D_(const ContainerAllocator& _alloc)
    : class_id(0)
    , center_x(0.0)
    , center_y(0.0)
    , center_z(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , orient(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _class_id_type;
  _class_id_type class_id;

   typedef float _center_x_type;
  _center_x_type center_x;

   typedef float _center_y_type;
  _center_y_type center_y;

   typedef float _center_z_type;
  _center_z_type center_z;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef float _orient_type;
  _orient_type orient;

   typedef float _confidence_type;
  _confidence_type confidence;




  typedef boost::shared_ptr< ::av_msgs::Object3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_msgs::Object3D_<ContainerAllocator> const> ConstPtr;

}; // struct Object3D_

typedef ::av_msgs::Object3D_<std::allocator<void> > Object3D;

typedef boost::shared_ptr< ::av_msgs::Object3D > Object3DPtr;
typedef boost::shared_ptr< ::av_msgs::Object3D const> Object3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_msgs::Object3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_msgs::Object3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace av_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'av_msgs': ['/home/zhouji/Documents/autodrive/rpc_ws/src/common/av_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::Object3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_msgs::Object3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::Object3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_msgs::Object3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::Object3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_msgs::Object3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_msgs::Object3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b61e17d31f6a6546d41ab0932afcccd8";
  }

  static const char* value(const ::av_msgs::Object3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb61e17d31f6a6546ULL;
  static const uint64_t static_value2 = 0xd41ab0932afcccd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::av_msgs::Object3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_msgs/Object3D";
  }

  static const char* value(const ::av_msgs::Object3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_msgs::Object3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 class_id\n\
float32 center_x\n\
float32 center_y\n\
float32 center_z\n\
float32 length\n\
float32 width\n\
float32 height\n\
float32 orient\n\
float32 confidence\n\
";
  }

  static const char* value(const ::av_msgs::Object3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_msgs::Object3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_id);
      stream.next(m.center_x);
      stream.next(m.center_y);
      stream.next(m.center_z);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.orient);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_msgs::Object3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_msgs::Object3D_<ContainerAllocator>& v)
  {
    s << indent << "class_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "center_x: ";
    Printer<float>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<float>::stream(s, indent + "  ", v.center_y);
    s << indent << "center_z: ";
    Printer<float>::stream(s, indent + "  ", v.center_z);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "orient: ";
    Printer<float>::stream(s, indent + "  ", v.orient);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MSGS_MESSAGE_OBJECT3D_H
