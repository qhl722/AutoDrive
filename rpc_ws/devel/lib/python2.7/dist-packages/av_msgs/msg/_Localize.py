# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/Localize.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Localize(genpy.Message):
  _md5sum = "d2f7aa9b1e8b30874a6fa2a9ed3ff135"
  _type = "av_msgs/Localize"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
string raw_data
float64 mTime
float64 latitude
float64 longitude
float64 altitude
float64 vel_x
float64 vel_y
float64 vel_z
float64 acc_x
float64 acc_y
float64 acc_z
uint8 nav_mode
uint8 pos_mode
uint8 vel_mode
uint8 att_mode
float64 angular_vel_x
float64 angular_vel_y
float64 angular_vel_z
float64 heading
float64 pitch
float64 roll
float64 pose_x
float64 pose_y
"""
  __slots__ = ['timestamp','raw_data','mTime','latitude','longitude','altitude','vel_x','vel_y','vel_z','acc_x','acc_y','acc_z','nav_mode','pos_mode','vel_mode','att_mode','angular_vel_x','angular_vel_y','angular_vel_z','heading','pitch','roll','pose_x','pose_y']
  _slot_types = ['uint64','string','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint8','uint8','uint8','uint8','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,raw_data,mTime,latitude,longitude,altitude,vel_x,vel_y,vel_z,acc_x,acc_y,acc_z,nav_mode,pos_mode,vel_mode,att_mode,angular_vel_x,angular_vel_y,angular_vel_z,heading,pitch,roll,pose_x,pose_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Localize, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.raw_data is None:
        self.raw_data = ''
      if self.mTime is None:
        self.mTime = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.vel_x is None:
        self.vel_x = 0.
      if self.vel_y is None:
        self.vel_y = 0.
      if self.vel_z is None:
        self.vel_z = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.nav_mode is None:
        self.nav_mode = 0
      if self.pos_mode is None:
        self.pos_mode = 0
      if self.vel_mode is None:
        self.vel_mode = 0
      if self.att_mode is None:
        self.att_mode = 0
      if self.angular_vel_x is None:
        self.angular_vel_x = 0.
      if self.angular_vel_y is None:
        self.angular_vel_y = 0.
      if self.angular_vel_z is None:
        self.angular_vel_z = 0.
      if self.heading is None:
        self.heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pose_x is None:
        self.pose_x = 0.
      if self.pose_y is None:
        self.pose_y = 0.
    else:
      self.timestamp = 0
      self.raw_data = ''
      self.mTime = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.vel_x = 0.
      self.vel_y = 0.
      self.vel_z = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.nav_mode = 0
      self.pos_mode = 0
      self.vel_mode = 0
      self.att_mode = 0
      self.angular_vel_x = 0.
      self.angular_vel_y = 0.
      self.angular_vel_z = 0.
      self.heading = 0.
      self.pitch = 0.
      self.roll = 0.
      self.pose_x = 0.
      self.pose_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_Q.pack(self.timestamp))
      _x = self.raw_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d4B8d.pack(_x.mTime, _x.latitude, _x.longitude, _x.altitude, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.nav_mode, _x.pos_mode, _x.vel_mode, _x.att_mode, _x.angular_vel_x, _x.angular_vel_y, _x.angular_vel_z, _x.heading, _x.pitch, _x.roll, _x.pose_x, _x.pose_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.raw_data = str[start:end].decode('utf-8')
      else:
        self.raw_data = str[start:end]
      _x = self
      start = end
      end += 148
      (_x.mTime, _x.latitude, _x.longitude, _x.altitude, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.nav_mode, _x.pos_mode, _x.vel_mode, _x.att_mode, _x.angular_vel_x, _x.angular_vel_y, _x.angular_vel_z, _x.heading, _x.pitch, _x.roll, _x.pose_x, _x.pose_y,) = _struct_10d4B8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_Q.pack(self.timestamp))
      _x = self.raw_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d4B8d.pack(_x.mTime, _x.latitude, _x.longitude, _x.altitude, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.nav_mode, _x.pos_mode, _x.vel_mode, _x.att_mode, _x.angular_vel_x, _x.angular_vel_y, _x.angular_vel_z, _x.heading, _x.pitch, _x.roll, _x.pose_x, _x.pose_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.raw_data = str[start:end].decode('utf-8')
      else:
        self.raw_data = str[start:end]
      _x = self
      start = end
      end += 148
      (_x.mTime, _x.latitude, _x.longitude, _x.altitude, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.nav_mode, _x.pos_mode, _x.vel_mode, _x.att_mode, _x.angular_vel_x, _x.angular_vel_y, _x.angular_vel_z, _x.heading, _x.pitch, _x.roll, _x.pose_x, _x.pose_y,) = _struct_10d4B8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q = struct.Struct("<Q")
_struct_10d4B8d = struct.Struct("<10d4B8d")
