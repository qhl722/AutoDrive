# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/TrafficLightDetect.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import av_msgs.msg

class TrafficLightDetect(genpy.Message):
  _md5sum = "33316cd0fd07b9b668bdae386f00ea87"
  _type = "av_msgs/TrafficLightDetect"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
TrafficLight[]  tl_det_list

================================================================================
MSG: av_msgs/TrafficLight
uint8 id
#交通灯ID
uint8 type
#圆形1 左转2 直行3 右转4 左转掉头5 掉头6
uint8 status
#红1 绿2 黄3
uint8 time
#当前状态倒数数字
float32 confidence
#置信度
"""
  __slots__ = ['timestamp','tl_det_list']
  _slot_types = ['uint64','av_msgs/TrafficLight[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,tl_det_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficLightDetect, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.tl_det_list is None:
        self.tl_det_list = []
    else:
      self.timestamp = 0
      self.tl_det_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_Q.pack(self.timestamp))
      length = len(self.tl_det_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.tl_det_list:
        _x = val1
        buff.write(_struct_4Bf.pack(_x.id, _x.type, _x.status, _x.time, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tl_det_list is None:
        self.tl_det_list = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tl_det_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.TrafficLight()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.type, _x.status, _x.time, _x.confidence,) = _struct_4Bf.unpack(str[start:end])
        self.tl_det_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_Q.pack(self.timestamp))
      length = len(self.tl_det_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.tl_det_list:
        _x = val1
        buff.write(_struct_4Bf.pack(_x.id, _x.type, _x.status, _x.time, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tl_det_list is None:
        self.tl_det_list = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tl_det_list = []
      for i in range(0, length):
        val1 = av_msgs.msg.TrafficLight()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.type, _x.status, _x.time, _x.confidence,) = _struct_4Bf.unpack(str[start:end])
        self.tl_det_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q = struct.Struct("<Q")
_struct_4Bf = struct.Struct("<4Bf")
