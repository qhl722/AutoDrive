# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from av_msgs/Trajectory.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import av_msgs.msg

class Trajectory(genpy.Message):
  _md5sum = "11573a4fb030f7929e047f56621802a1"
  _type = "av_msgs/Trajectory"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Pose initial_pose
Pose[] poses
uint8 driving_direction
uint8 driving_state

================================================================================
MSG: av_msgs/Pose
# 时间戳
uint64 timestamp
# 轨迹x坐标
float64 x
# 轨迹y坐标
float64 y
# 轨迹朝向角坐标
float64 theta
# 曲率
float64 curvature
# 速度
float64 velocity
# 加速度
float64 acceleration
"""
  __slots__ = ['initial_pose','poses','driving_direction','driving_state']
  _slot_types = ['av_msgs/Pose','av_msgs/Pose[]','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       initial_pose,poses,driving_direction,driving_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Trajectory, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.initial_pose is None:
        self.initial_pose = av_msgs.msg.Pose()
      if self.poses is None:
        self.poses = []
      if self.driving_direction is None:
        self.driving_direction = 0
      if self.driving_state is None:
        self.driving_state = 0
    else:
      self.initial_pose = av_msgs.msg.Pose()
      self.poses = []
      self.driving_direction = 0
      self.driving_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Q6d.pack(_x.initial_pose.timestamp, _x.initial_pose.x, _x.initial_pose.y, _x.initial_pose.theta, _x.initial_pose.curvature, _x.initial_pose.velocity, _x.initial_pose.acceleration))
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _x = val1
        buff.write(_struct_Q6d.pack(_x.timestamp, _x.x, _x.y, _x.theta, _x.curvature, _x.velocity, _x.acceleration))
      _x = self
      buff.write(_struct_2B.pack(_x.driving_direction, _x.driving_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.initial_pose is None:
        self.initial_pose = av_msgs.msg.Pose()
      if self.poses is None:
        self.poses = None
      end = 0
      _x = self
      start = end
      end += 56
      (_x.initial_pose.timestamp, _x.initial_pose.x, _x.initial_pose.y, _x.initial_pose.theta, _x.initial_pose.curvature, _x.initial_pose.velocity, _x.initial_pose.acceleration,) = _struct_Q6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in range(0, length):
        val1 = av_msgs.msg.Pose()
        _x = val1
        start = end
        end += 56
        (_x.timestamp, _x.x, _x.y, _x.theta, _x.curvature, _x.velocity, _x.acceleration,) = _struct_Q6d.unpack(str[start:end])
        self.poses.append(val1)
      _x = self
      start = end
      end += 2
      (_x.driving_direction, _x.driving_state,) = _struct_2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Q6d.pack(_x.initial_pose.timestamp, _x.initial_pose.x, _x.initial_pose.y, _x.initial_pose.theta, _x.initial_pose.curvature, _x.initial_pose.velocity, _x.initial_pose.acceleration))
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _x = val1
        buff.write(_struct_Q6d.pack(_x.timestamp, _x.x, _x.y, _x.theta, _x.curvature, _x.velocity, _x.acceleration))
      _x = self
      buff.write(_struct_2B.pack(_x.driving_direction, _x.driving_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.initial_pose is None:
        self.initial_pose = av_msgs.msg.Pose()
      if self.poses is None:
        self.poses = None
      end = 0
      _x = self
      start = end
      end += 56
      (_x.initial_pose.timestamp, _x.initial_pose.x, _x.initial_pose.y, _x.initial_pose.theta, _x.initial_pose.curvature, _x.initial_pose.velocity, _x.initial_pose.acceleration,) = _struct_Q6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in range(0, length):
        val1 = av_msgs.msg.Pose()
        _x = val1
        start = end
        end += 56
        (_x.timestamp, _x.x, _x.y, _x.theta, _x.curvature, _x.velocity, _x.acceleration,) = _struct_Q6d.unpack(str[start:end])
        self.poses.append(val1)
      _x = self
      start = end
      end += 2
      (_x.driving_direction, _x.driving_state,) = _struct_2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q6d = struct.Struct("<Q6d")
_struct_2B = struct.Struct("<2B")
